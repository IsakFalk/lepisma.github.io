<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>abhinav tushar</title>
    <description>Personal Blog</description>
    <link>https://lepisma.github.io//</link>
    <atom:link href="https://lepisma.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Ricing up Org mode</title>
        <description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;T&lt;/span&gt;his is a short post pulling in &lt;a href=&quot;https://www.reddit.com/r/unixporn/comments/73vwpa/stumpwm_light_colors_with_purple_accent/dnvqwt8/?context=1&quot;&gt;my
comment&lt;/a&gt;
on a /r/unixporn submission where I document my Org mode dotfiles for a word
processor like interface. The aim is to recreate a
&lt;a href=&quot;https://www.reddit.com/r/unixporn/comments/6lj3h3/stumpwmkde_emacs_org_mode_writing_setup/&quot;&gt;rice&lt;/a&gt;
I submitted on /r/unixporn some time back. Shown below is a demo of what the
thing actually looks like.&lt;/p&gt;

&lt;aside&gt;
&lt;div class=&quot;aside-title&quot;&gt;
In action
&lt;/div&gt;

&lt;p&gt;
Following screencast shows the setup in action.
&lt;/p&gt;

&lt;video width=&quot;100%&quot; controls=&quot;controls&quot;&gt;
  &lt;source src=&quot;https://u.teknik.io/5Vy1T.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;
&lt;/aside&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/posts/org-rice/demo.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;The look is inspired from the style used by &lt;a href=&quot;https://edwardtufte.github.io/et-book&quot;&gt;Edward
Tufte&lt;/a&gt; in his books. A replication of the
style in CSS is up on github for free at
&lt;a href=&quot;https://edwardtufte.github.io/tufte-css/&quot;&gt;tufte-css&lt;/a&gt;. Other than the proper
spacing and margins, the thing that I like in Tufte’s style is the font &lt;a href=&quot;https://edwardtufte.github.io/et-book&quot;&gt;ET
Book&lt;/a&gt; which is an old-style serif font
with beautiful &lt;em&gt;italics&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/posts/org-rice/et-book.png&quot; data-lightbox=&quot;bootstrap&quot;&gt;
    &lt;img src=&quot;/images/posts/org-rice/et-book.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    Et Book font
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;To start, we need a nice looking light color scheme so that faces other than
that of Org mode look decent. I
selected &lt;a href=&quot;https://github.com/nashamri/spacemacs-theme&quot;&gt;spacemacs-light&lt;/a&gt; mostly
because I use spacemacs and it is pretty complete as far as number of faces
covered is concerned. Also, it has a good off-white background (&lt;code class=&quot;highlighter-rouge&quot;&gt;#fbf8ef&lt;/code&gt;).
There are three basic steps involved from here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setting faces and themes&lt;/li&gt;
  &lt;li&gt;Padding and stuff&lt;/li&gt;
  &lt;li&gt;Other Org-mode visual and usability tweaks&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;faces&quot;&gt;Faces&lt;/h2&gt;

&lt;p&gt;We will set Et Book (named &lt;code class=&quot;highlighter-rouge&quot;&gt;EtBembo&lt;/code&gt;) font to most of the org mode. Get the font
&lt;a href=&quot;https://github.com/edwardtufte/et-book&quot;&gt;here&lt;/a&gt;. If you are using spacemacs, the
easy way is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;theming&lt;/code&gt; layer in spacemacs to set faces. My face config
are available
&lt;a href=&quot;https://github.com/lepisma/rogue/blob/75ab1c3422b409f41daa4c003b931e869eed0914/config.el#L205&quot;&gt;here&lt;/a&gt;.
For each face, the second set of properties are for the light theme
(spacemacs-light). I have set the &lt;code class=&quot;highlighter-rouge&quot;&gt;variable-pitch&lt;/code&gt; font to be &lt;code class=&quot;highlighter-rouge&quot;&gt;EtBembo&lt;/code&gt; (along
with title and stuff) and enable &lt;code class=&quot;highlighter-rouge&quot;&gt;variable-pitch-mode&lt;/code&gt; when in an org buffer.&lt;/p&gt;

&lt;p&gt;Note that unlike other face settings, &lt;code class=&quot;highlighter-rouge&quot;&gt;org-indent&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;(:inherit (org-hide
fixed-pitch))&lt;/code&gt; has a crucial effect of aligning text under Org heading in a
non-monospace font, so you might not want to miss that.&lt;/p&gt;

&lt;h2 id=&quot;padding&quot;&gt;Padding&lt;/h2&gt;

&lt;p&gt;There are a few places where you can gain some breathing space.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Line spacing&lt;/p&gt;

    &lt;p&gt;Per buffer line spacing can be set using the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;line-spacing&lt;/code&gt;.
Something like 0.1 goes well here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Top padding&lt;/p&gt;

    &lt;p&gt;Similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;mode-line&lt;/code&gt;, Emacs also has &lt;code class=&quot;highlighter-rouge&quot;&gt;header-line&lt;/code&gt; for windows. Setting its
format to empty string &lt;code class=&quot;highlighter-rouge&quot;&gt;(setq header-line-format &quot; &quot;)&lt;/code&gt; gives you top padding.
Also by changing header-line face height, you can change this spacing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Side padding&lt;/p&gt;

    &lt;p&gt;Adding side spaces is possible by setting margin width. You also need to
reset the buffer to make the change visible. Here is a function that does
that:&lt;/p&gt;

    &lt;div class=&quot;language-emacs-lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;left-margin-width&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;right-margin-width&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-window-buffer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you need padding all around the frame so that everything (including
mode-line) goes inside the padded view, you can set &lt;code class=&quot;highlighter-rouge&quot;&gt;internal-border-width&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also try
&lt;a href=&quot;https://github.com/joostkremers/writeroom-mode&quot;&gt;writeroom-mode&lt;/a&gt; which makes the
writing buffer cleaner and has settings for many of the padding related stuff.
One neat feature is that it makes the buffer text centered and hides mode line.
I don’t use it much since my current settings reproduce pretty much what I need
from it. Nevertheless, &lt;a href=&quot;https://github.com/lepisma/rogue/blob/75ab1c3422b409f41daa4c003b931e869eed0914/packages.el#L264-L287&quot;&gt;here is some
config&lt;/a&gt;
for writeroom.&lt;/p&gt;

&lt;h2 id=&quot;other-tweaks&quot;&gt;Other tweaks&lt;/h2&gt;

&lt;p&gt;Whatever information your mode line might be displaying, most likely it can be
turned off if you are aiming for a distraction free setup. Spacemacs provide a
minor mode &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden-mode-line-mode&lt;/code&gt; to hide the mode line, which can be added to
your org hook. Some other minor settings follow:&lt;/p&gt;

&lt;div class=&quot;language-emacs-lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-startup-indented&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-bullets-bullet-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; no bullets, needs org-bullets package&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-ellipsis&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;  &quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; folding symbol&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-pretty-entities&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-hide-emphasis-markers&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;;; show actually italicized text instead of /italicized text/&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-agenda-block-separator&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-fontify-whole-heading-line&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-fontify-done-headline&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;org-fontify-quote-and-verse-blocks&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also try disabling &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line-mode&lt;/code&gt; in org-mode as varying line heights make these
highlights look bad. Install
&lt;a href=&quot;https://github.com/Fuco1/org-pretty-table&quot;&gt;org-pretty-table-mode&lt;/a&gt; for getting
beautiful table borders. Other stuff like latex (&lt;code class=&quot;highlighter-rouge&quot;&gt;org-latex-toggle-fragment&lt;/code&gt;)
and image previews (&lt;code class=&quot;highlighter-rouge&quot;&gt;org-image-toggle-inline&lt;/code&gt;) come bundled in with org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lepisma/rogue/tree/75ab1c3422b409f41daa4c003b931e869eed0914&quot;&gt;Here&lt;/a&gt;
is the snapshot of my Emacs dotfiles with config related to this post.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Oct 2017 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2017/10/28/ricing-org-mode/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/10/28/ricing-org-mode/</guid>
      </item>
    
      <item>
        <title>The point of keyboarding</title>
        <description>&lt;p class=&quot;post-intro&quot;&gt;
Asking myself whats important in the keyboard vs mouse debate. Is it really just
the matter of speed or is it more fundamentally connected to what these devices
represent? I believe its the cost of attention that matters.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt; recently switched to a tiling window manager and
gave in some more estate to &lt;em&gt;keyboarding&lt;/em&gt;. Not many useful things happen if I
click around in my desktop now (unless, of course, there is a browser window
open).&lt;/p&gt;

&lt;p&gt;Whenever I have to explain someone, who (usually) does not program, why I use
keyboard for doing things which are clearly possible using a few mouse clicks, I
find myself fishing around for some reasonable transformation of the same old
answer, ‘using a keyboard is faster’. Do I really care about &lt;em&gt;speed&lt;/em&gt;? I would be
lying if I said yes to that.&lt;/p&gt;

&lt;h3 id=&quot;speed-vs-effortlessness&quot;&gt;Speed vs Effortlessness&lt;/h3&gt;

&lt;p&gt;There are obvious differences between tasks like writing text vs doing something
inherently visual which lets you choose either keyboard or mouse without any
doubt. The problem comes with thing like navigating through directory tree,
browsing web, reading pdfs etc. You know, questions like whether &lt;em&gt;h-j-k-l&lt;/em&gt; is
faster than mousing or whether clicking on toolbar is efficient or pressing a
shortcut key.&lt;/p&gt;

&lt;p&gt;Should you really use keyboard over mouse (or the other way) at these places?
Here is Xah Lee &lt;a href=&quot;http://xahlee.info/kbd/mouse_vs_keyboard.html&quot;&gt;talking about&lt;/a&gt;
talking about this issue, arguing that mouse excels in efficiency at a few
places and suggests a hybrid approach instead of being a total keyboard warrior.
Here is Jeff Atwood
&lt;a href=&quot;https://blog.codinghorror.com/revisiting-keyboard-vs-the-mouse-pt-1/&quot;&gt;discussing&lt;/a&gt;
mouse vs keyboard and “advocating a two-fisted computing” approach to improve
speed. I mostly agree with their conclusions that these two devices complement
each other but there is this little thing, this &lt;em&gt;focus on speed&lt;/em&gt; that goes
against what I find more important. I am not really, &lt;em&gt;really&lt;/em&gt; fast at typing. I
can be if I spend some time training myself. But I don’t, because typing is now
effortless for me. However slow I might be to someone else, I don’t even think
about improving in that domain (even though that is mostly a low hanging fruit
for increasing my overall speed). But I do play around with my other tooling to
improve &lt;em&gt;something&lt;/em&gt; in my work. What is that &lt;em&gt;something&lt;/em&gt;, if not input
efficiency?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Rice makes up a major portion of my diet. We have two ways to cook it where I
live right now. One is an automatic rice cooker. You put in rice + water and
forget it. It automatically gets turned off when done. It takes around 40
minutes. Another way is to use a pressure cooker. Put in rice + water, &lt;em&gt;be
attentive&lt;/em&gt; for the whistle (so that you could turn the stove off at the correct
count) and get cooked rice in less than 10 minutes. We can do some other work in
both the cases, but the pressure cooker demands a piece from my bag of
attention. We almost never use the pressure cooker for rice (not since our auto
cooker broke though).&lt;/p&gt;

&lt;p&gt;To clarify, I am not worried about shaving off microseconds but am more inclined
to reduce the &lt;em&gt;cognitive burden&lt;/em&gt; while doing things which aren’t the main focus
of the task I am trying to accomplish. I don’t avoid something because its slow,
but because I don’t like doing it.&lt;/p&gt;

&lt;h3 id=&quot;interface&quot;&gt;Interface&lt;/h3&gt;

&lt;p&gt;Good design disappears. Its transparent and doesn’t make you sweat for secondary
things. In application user interfaces, its the uniformity and familiarity which
removes the usage friction. Consider the minimize, maximize and close buttons
present in top right of many window managers. Except Mac OS (and few other
customized systems), where we get these on the left side, these make up a
universal language where you throw your mouse up there and things happen without
being overly conscious of the very act of moving the mouse.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/posts/keyboard/dolphin.png&quot; data-lightbox=&quot;method&quot;&gt;
    &lt;img src=&quot;/images/posts/keyboard/dolphin.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    A familiar interface of a file browser removes the mental effort of doing
    what you want to do
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Consider something more unorthodox than simply closing the window. How about
showing hidden files? Now the uniformity seems to break a little bit. You might
have to switch gears and look not on the directly visible controls, but under a
certain menu, which might be different in different file managers. This point
manifests itself more openly when you push this analogy further to much more a
liberal graphical interface, the web. The web is a wild place. There are near
infinite design patterns and more keep popping every day. Not that I hate it (I
absolutely adore the experimentation possibilities opened up by the web), but
this results in you taking more effort to &lt;em&gt;navigate&lt;/em&gt; the web instead of focusing
on the actual work you want to do.&lt;/p&gt;

&lt;p&gt;This breaking point in graphical interfaces becomes important for programmers
who are more involved in the act of &lt;em&gt;using a computer&lt;/em&gt; than the regulars. They
are willing and able to customize their tools for avoiding actions they don’t
like. The problem is, its hard to make &lt;em&gt;graphical&lt;/em&gt; interfaces amenable to
extensive customization without making a mess. And if you don’t try to do that,
you make the next lower level api less accessible psychologically. While using
&lt;a href=&quot;https://userbase.kde.org/KWin&quot;&gt;Kwin&lt;/a&gt; (KDE’s window manager), I was less aware of
(and willing to try) its scripting capabilities. &lt;em&gt;What behavior would I possibly
alter by scripting my window manager?&lt;/em&gt; After switching to
&lt;a href=&quot;https://stumpwm.github.io/&quot;&gt;StumpWM&lt;/a&gt;, I have done a lot of tweaking in how I
manage windows, just because now I am &lt;em&gt;closer&lt;/em&gt; to the source of the tool itself
and thus have a much more elaborate mental model of whats going inside that
tool.&lt;/p&gt;

&lt;p&gt;Do all these matter for the discussion in hand here? Yes. The mouse and the
keyboard are &lt;em&gt;just&lt;/em&gt; input methods. They fuse &lt;em&gt;with&lt;/em&gt; the interface to become
&lt;em&gt;part&lt;/em&gt; of it. They neither stand for the interface you are facing, nor are they
complete representations of the vices and virtues of these interfaces. Being
just a part of the interfaces, the question now is about which interface, &lt;em&gt;as a
whole&lt;/em&gt;, is better suited for users who can reduce the cognitive friction if
provided sufficiently deep access to the innards of the program.&lt;/p&gt;

&lt;h3 id=&quot;plain-text&quot;&gt;Plain text&lt;/h3&gt;

&lt;p&gt;Take any piece of software apart and you will find code. Text. There is no other
&lt;em&gt;popular&lt;/em&gt; intermediate representation. And text has a uniform UI. Set of lines
arranged in something akin to pages. Every piece of abstraction wraps around
this using a set of standards and opinions. If done well, the elements create a
very hackable system, which lets you cut off usage strain from most of the
places. And its easy to do well at text level because 1) text has a more
constrained semantics and 2) it provides a more accurate mental model of the
software.&lt;/p&gt;

&lt;p&gt;The fact that plain text is &lt;em&gt;the most fundamental UI&lt;/em&gt; has a lot to do with why I
skip mousing in many situations. This also underlies the subtle difference
between how and why an interface accepts keys. Is it for better &lt;em&gt;speed&lt;/em&gt;? Or is
it for a more fundamental reason like &lt;em&gt;exposing its inner plain text&lt;/em&gt; essence?
Here is an example. In Gmail’s web interface, which I have used pretty often and
still do sometimes, I never got to use keyboard shortcuts because both the
keyboard &lt;em&gt;and&lt;/em&gt; the mouse put me at the same level of control. This changed when
I switched to a desktop email client &lt;a href=&quot;https://userbase.kde.org/KMail&quot;&gt;Kmail&lt;/a&gt;. I
went ahead and added some custom scripts/hooks and boom! I am using keys more.
Recently pushed it even further by switching to an Emacs based system
&lt;a href=&quot;https://www.djcbsoftware.nl/code/mu/mu4e.html&quot;&gt;mu4e&lt;/a&gt; and its all keys now.
There lies my argument for saying that keyboarding is superior&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Its superior not because its faster, nor because there &lt;strong&gt;are&lt;/strong&gt; shortcuts for
you to do things, but because you &lt;strong&gt;can make&lt;/strong&gt; shortcuts to do things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this has strong ties with the program itself. What I am proposing, is the
idea that keyboards symbolize the act of &lt;em&gt;creating&lt;/em&gt; shortcuts rather than
&lt;em&gt;using&lt;/em&gt; them.&lt;/p&gt;

&lt;p&gt;Hint based browsing (like &lt;a href=&quot;https://addons.mozilla.org/en-us/firefox/addon/mouseless-browsing/&quot;&gt;mouseless
browsing&lt;/a&gt;
addon for firefox, see image below) comes to mind as another case here. This
lies on the side of an interface which &lt;em&gt;gives&lt;/em&gt; you keyboard shortcuts rather
than let you &lt;em&gt;create&lt;/em&gt; some (unless, of course, you are going to change the
addon’s source code). Say whatever about efficiency, the interface these hints
conjure is at the same level as when you use a mouse. You still have to
consciously &lt;em&gt;see&lt;/em&gt; where you want to &lt;em&gt;click&lt;/em&gt; and then act accordingly.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/posts/keyboard/hint.png&quot; data-lightbox=&quot;method&quot;&gt;
    &lt;img src=&quot;/images/posts/keyboard/hint.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    In hint mode (as shown here), you can press the keys shown on links
    (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements) to &lt;em&gt;click&lt;/em&gt; them. The image
    uses Hok plugin for
    &lt;a href=&quot;https://github.com/mooz/keysnail/wiki/plugin&quot;&gt;keysnail&lt;/a&gt; in
    Firefox
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What would be &lt;em&gt;the&lt;/em&gt; keyboard centered interface that I might enjoy more here?
Probably something that lets me hit links by allowing me to &lt;em&gt;create&lt;/em&gt; a filtering
function based on the context. This will take me closer to the page’s internal
structure and will allow me to avoid effort. From the top of my mind, I will
make some filters for navigating search results in any search page (since not
all of them let you navigate with arrow keys). And this is possible because I
will have access to a more uniform view of the inner dynamics of any page.
Arguably, this is not the ‘plain text interface’ because the user facing side is
still the same, but it goes deeper than just setting shortcuts and embraces the
ideology of this depth.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thinking like this, I find it disagreeable now when people talk about learning
keyboard shortcuts and/or improving speed. Consider Emacs. You will find tons of
tutorials which start by telling keyboard shortcuts. For me, while learning
Emacs, the turning point was not when I learned and &lt;em&gt;started&lt;/em&gt; using a lot of
keybindings, but when I used &lt;a href=&quot;https://github.com/emacs-helm/helm/&quot;&gt;helm&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x&lt;/code&gt;
and came to know that all these functions (see image below) can be &lt;em&gt;created&lt;/em&gt;,
&lt;em&gt;called&lt;/em&gt; and &lt;em&gt;bound&lt;/em&gt; to keys in whatever way you want.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/posts/keyboard/helm.png&quot; data-lightbox=&quot;method&quot;&gt;
    &lt;img src=&quot;/images/posts/keyboard/helm.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    Interfaces like helm combined with sensibly named items are good ways to
    explore what is possible in a system.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Keys are not inherently special, the plain text interface is. This also means
that at places without a plain text interface, mousing/pointing can be better
(like in browsing web). But &lt;em&gt;if&lt;/em&gt; you have a keyboard respecting (in the sense
that it exposes its inner model instead of just &lt;em&gt;having&lt;/em&gt; shortcuts) plain text
alternative, that is going to be smoother on mind because of the customization
potential created by the similarity of inner and outer representation. And its
this smoothness, rather than speed, which really clicks me.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Aug 2017 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2017/08/25/keyboard/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/08/25/keyboard/</guid>
      </item>
    
      <item>
        <title>Leaving goodreads</title>
        <description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;G&lt;/span&gt;oodreads feels like a project with a lost focus. I
can list a dozen (about right) things that don’t justify the prefix of the
project’s name. Don’t get me wrong here. The content there is really good. The
collections, lists people make, &lt;em&gt;most&lt;/em&gt; reviews, they all are good. What’s not
good is the product itself. It looks like no one is developing it any more.
Rightly so if maybe the users are satisfied.&lt;/p&gt;

&lt;p&gt;Its search doesn’t provide what you expect from all modern search interfaces.
Try turning on infinite scroll in your shelves and keep going down only to learn
about &lt;em&gt;random sampling&lt;/em&gt;. Oh and the clutter in the default setting of your feed.
Everything and more made me switch to a scheme where my reading data is more
bare, accessible and manageable without the noise.&lt;/p&gt;

&lt;h2 id=&quot;a-better-list&quot;&gt;A better list&lt;/h2&gt;

&lt;p&gt;My usual book reading cycle involves doing a web search (not goodreads’) after I
become aware of a title and landing on goodreads to mark it as &lt;code class=&quot;highlighter-rouge&quot;&gt;to-read&lt;/code&gt;. Then
rating it and possibly writing something about it. I don’t tend to maintain
multiple shelves because maintaining that isn’t a very smooth process on the web
ui.&lt;/p&gt;

&lt;p&gt;I am now using an org file for
my &lt;a href=&quot;http://github.com/lepisma/reading-list&quot;&gt;reading-list&lt;/a&gt; with a little bit of
Emacs &lt;a href=&quot;http://github.com/lepisma/org-books&quot;&gt;scripting&lt;/a&gt; which lets me import
books from amazon and goodreads urls. Thankfully, there is csv export feature in
goodreads which lets you export all you books in a single csv, which is easy to
pull in.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/posts/goodreads/screen.png&quot; /&gt;
  &lt;figcaption&gt;
    Yes, stars and everything. A little bit of effort and book covers can be
    here too.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Keeping an org file has some neat benefits. I can pull readings in my agenda
view, create progress indicators separate from the shelves (which can go in org
tags), attach arbitrary content to entries, create innumerable custom and
dynamic views for the library, write richer reviews etc. I am still
experimenting with it but I believe it would fit right in with my needs and
would quickly become what I want it to be.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jun 2017 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2017/06/29/leaving-goodreads/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/06/29/leaving-goodreads/</guid>
      </item>
    
      <item>
        <title>Simpler time map plots</title>
        <description>&lt;p class=&quot;post-intro&quot;&gt;
Proposing a one dimensional version of &lt;a href=&quot;https://districtdatalabs.silvrback.com/time-maps-visualizing-discrete-events-across-many-timescales&quot;&gt;time
map&lt;/a&gt;
plots which doesn’t lose any information displayed in most cases and is cleaner
to understand.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;B&lt;/span&gt;ehavior of time series is tricky to judge from
simple plots. The process generating the series can have multiple underlying
mechanics and simple plots make it hard to discern these. Sometime back I read
about
&lt;a href=&quot;https://districtdatalabs.silvrback.com/time-maps-visualizing-discrete-events-across-many-timescales&quot;&gt;time maps&lt;/a&gt;,
which try to solve a part of this problem (I encourage you to read that post
before this one). Time maps target visualizing time differences between discrete
events. This is helpful, for example, to see if there are multiple modes in the
repetition of some events. If on a single day you eat 5 times from 9 AM to 11 AM
and call it a day, your eating time plot will have repetitions for those small
intervals &lt;em&gt;and&lt;/em&gt; for the daily one. A time map captures these two modes easily.&lt;/p&gt;

&lt;p&gt;Consider the following time series. The x axis shows date and the y axis shows
my lastfm &lt;a href=&quot;https://www.last.fm/user/abhinavtushar&quot;&gt;scrobbles&lt;/a&gt; per day.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;counts-lfm&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;My daily lastfm scrobbles&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Nothing much to it. If I plot it as a time map, I get this (scale is log; sorry
for the &lt;em&gt;not that useful&lt;/em&gt; tick labels in this whole post,
&lt;a href=&quot;https://github.com/lepisma/tufte.js/issues/21&quot;&gt;will fix it&lt;/a&gt;).&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;diffs-lfm-vanilla&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Scrobbles time map&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Each dot here is a listen. The \( x \) value being the time difference between
it and the previous listen, \( y \) being the difference with next listen.
Note that the plot is log scaled (thus the repeated pattern in lower values)
which helps us understand the diffs at multiple scales.&lt;/p&gt;

&lt;p&gt;Another important point is the &lt;em&gt;almost&lt;/em&gt; symmetry along \( x = y \) line. When
you use the &lt;em&gt;pre-event&lt;/em&gt; and &lt;em&gt;post-event&lt;/em&gt; time diffs of each event as \( x \)
and \( y \) value for plotting, one points \( x \) will be previous one’s
(according to event ordering) \( y \) value. Now this has consequences on
whether a time map is useful for you. What follows is the same plot with
marginal histograms along the axis. No doubt the \( x \) and \( y \)
marginals are similar. This is not because of the data but because of the way
both axis values are derived, resulting in a non-exact symmetry.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;diffs-lfm&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Time map with marginals&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Think about a point in top left corner. This refers to an event which was
preceded by another event shortly but is followed by the next event after a long
time gap. The opposite happens with point in bottom right. Because adjacent
events share \( x \) and \( y \), the mass of points has similar
distributions (notice that this is not the case with very few points). Unless
you are displaying another data dimension using color / size of the circles
(like in the original
&lt;a href=&quot;https://districtdatalabs.silvrback.com/time-maps-visualizing-discrete-events-across-many-timescales&quot;&gt;blog&lt;/a&gt;,
where we see points colored according to the time of day), the two dimensions
here just add to the visual clutter.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Lets tweak the lastfm data a little bit. Now, the scrobbles are filtered to show
only the first listen of each song. To give this some meaning, a lot of these
&lt;em&gt;filtered&lt;/em&gt; scrobbles in a short time span would mean that I explored more as
compared to repeating the same old songs.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;diffs-lfm-dd&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;First listen time map&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Notice how easy it is to find the bumps in the marginal plot. A plot of \( x
\) marginal follows.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;dd-hist&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;x marginal plot of first listens&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As a side note this plot makes me wonder about the origin of the bumps. The
initial rise up to \( x = 3, 4 \) (around 20, 50 minutes) is mostly due to
radios listens (which give you fresh songs frequently) or binging on some new
album/artist. The one around 7 (around 18 hours) might be a &lt;em&gt;session&lt;/em&gt; change. A
new session, with fresh items probably. Need to dig in the actual songs to
understand this.&lt;/p&gt;

&lt;h2 id=&quot;tweets&quot;&gt;Tweets&lt;/h2&gt;

&lt;p&gt;The original blog made a time map for tweets
of &lt;a href=&quot;https://twitter.com/BarackObama&quot;&gt;@BarackObama&lt;/a&gt;. I did a re-crawl. Here is
the time plot of tweets per day.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;counts-tw&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Tweets per day @BarackObama&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Next is the full time map for the series.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;diffs-tw&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Tweets time map @BarackObama&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As argued earlier, unless we are showing extra information, its much easier to
see the marginal to get the frequency behavior of the series. See the plot
below.&lt;/p&gt;

&lt;figure&gt;
&lt;div id=&quot;tw-hist&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Tweets time map 1D @BarackObama&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Making sense of a histogram in log scale (the kind I used, with uniform bins
over log scaled data; You can have non-uniform, log scaled bins too. I haven’t
tried that) is tricky. The bins and density don’t exactly go as you would
think. Additionally you would see repeated pattern (exposing the discrete
values) in the beginning and smoothing in the end. More rigorous analysis
should be done to derive something other than qualitative meanings from these.&lt;/li&gt;
  &lt;li&gt;Add to it the number-of-bins problem. Plots above
use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule&quot;&gt;Freedman-Diaconis rule&lt;/a&gt; to
get the number of bins. Changing this number can result in different views
as shown below.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;div id=&quot;tw-hist-less&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Tweets time map with 10 bins&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;div id=&quot;tw-hist-more&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Tweets time map with 200 bins&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;Time maps are neat exploratory tools. To me, they have more qualitative value
than quantitative. Most of the visualizations with more than a few dozen points
make more sense qualitatively and are better without unnecessary details, that’s
why we prefer heatmaps instead of regular scatter in certain cases. A marginal
time map follows the same idea.&lt;/p&gt;

&lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/scripts/posts/time-maps/tufte.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/scripts/posts/time-maps/script.js&quot;&gt;&lt;/script
&lt;/script&gt;
</description>
        <pubDate>Sun, 25 Jun 2017 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2017/06/25/simple-time-maps/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/06/25/simple-time-maps/</guid>
      </item>
    
      <item>
        <title>The Beauty of Syntactical Macros</title>
        <description>&lt;p class=&quot;post-intro&quot;&gt;
On the importance of code as first class citizen after my first ‘got it’ moment
with a Lisp.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;f you think about it, most of what we communicate
can be compiled down to something that is quite &lt;em&gt;literal&lt;/em&gt;, which is to say that
a Hollywood AI robot
(like &lt;a href=&quot;http://terminator.wikia.com/wiki/T-800_(The_Terminator)&quot;&gt;T-800&lt;/a&gt;) can read
and understand it mechanically using no more than a dictionary for reference.
For example, when we say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My dog is a cheetah&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in a literal sense, all we mean is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My dog runs very fast&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes the transformation is not so direct and we need more context or
language training to convert it to a &lt;em&gt;literal&lt;/em&gt; form. An example is the
following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When an elephant is in trouble even a frog will kick him.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do we get from these transformations? Occasionally a shorter
representation, specially when they exploit the context. Sometimes its a simple
meaning but with more weight. Sometimes its an indirect way of saying something
to change the flow of emotions. All in all we can agree that they are elegant
rhetorical devices and have a deeper connections with how we communicate and how
our mind evaluates these tiny vagaries.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;literal&lt;/em&gt; meaning is what we, as humans, can use (mostly) without ambiguity.
Considering this as the
final &lt;a href=&quot;https://www.wikiwand.com/en/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;, the
transformations mentioned above are more than &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; calls, which can be
seen as lookups in some instruction manual. These are more akin to Lisp style
&lt;code class=&quot;highlighter-rouge&quot;&gt;macros&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;expressing-programs&quot;&gt;Expressing programs&lt;/h2&gt;

&lt;p&gt;A programming language allows a really constrained form of expression and so
(fortunately) it needs lesser training to understand a chunk of &lt;em&gt;rhetorical
code&lt;/em&gt;, if there is one. There is a limit to how much a programmer can let
his/her words fly without breaking the intended low level syntax tree. But that
limit definitely is above what I have hit, until now.&lt;/p&gt;

&lt;p&gt;I have been playing with &lt;a href=&quot;https://github.com/hylang/hy&quot;&gt;Hy&lt;/a&gt;, which is a Lispy
dialect of Python, recently and started using macros. Put simply, they transform
code to code. The input form usually is something we intend to write, the output
being something the computer could understand. An example follows. Forget about
the visual clutter if you are &lt;em&gt;not familiar&lt;/em&gt;
with &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;&lt;em&gt;s-expressions&lt;/em&gt;&lt;/a&gt; in Lisp and
just go through the words, nesting and order.&lt;/p&gt;

&lt;div class=&quot;language-common-lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;query-list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[return-cond&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source-list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;check-cond&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;SQL-ish query on list&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[item-index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[it]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~check-cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~source-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[it]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~return-cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~source-list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[ValueError]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;aside&gt;
&lt;div class=&quot;aside-title&quot;&gt;
S-expressions in Lisp
&lt;/div&gt;

Lisp code is represented as a list of items (possibly recursive) which can be
interpreted both as data and code. When interpreted as data, they refer to
themselves, when interpreted as code, the first item is something (a function,
macro) to be applied on the rest.

&lt;/aside&gt;

&lt;p&gt;Also forget about the dummy variables (&lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; …) and hygiene (I am
capturing &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;) if you &lt;em&gt;are familiar&lt;/em&gt; with Lisp. For reference, here is a
roughly equivalent code in Python for the code generated by that macro (forget
representing this
as
&lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions&quot;&gt;list comprehension&lt;/a&gt; for
a while, because its not about a specific language feature but how &lt;em&gt;easily&lt;/em&gt; we
can add another, possibly specific, feature):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What do I get from this macro? Here is a simple piece which uses this:&lt;/p&gt;

&lt;div class=&quot;language-common-lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;query-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dodo&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it.extinction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1660s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just by looking at it, you can sort of see what it is intended for. Indeed this
is a variant of list comprehension. When I was working on the code that needed
this construct, I was thinking of &lt;em&gt;something&lt;/em&gt; on the lines of the above example
in my mind. Usually, that &lt;em&gt;something&lt;/em&gt; would have gotten converted to a function
representation which would have a certain set of sensibly arranged and named
arguments. But now that I have seen the above &lt;em&gt;valid&lt;/em&gt; form, I don’t think a
function would have done justice to the exact &lt;em&gt;expression&lt;/em&gt; in my mind and
wouldn’t have been that flexible in its usage.&lt;/p&gt;

&lt;p&gt;Another example is with the case of &lt;a href=&quot;http://docopt.org/&quot;&gt;docopt&lt;/a&gt; based argument
parsing. &lt;em&gt;Docopt&lt;/em&gt; allows you to write human readable usage instructions for a
command line tool and parses it to a structure we can use in our program.
Although the arguments passed into the command line can be structured in a
nested way, the parsed dictionary returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;docopt&lt;/code&gt; is flat. Consider a
program with usage instruction like the following (items separated by &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; are
two options for representing the same thing):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;program task (sub-task-one | sto)
program task (sub-task-two | stt)
program task-two
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After parsing the arguments, docopt gives a dictionary like so:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sub-task-one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sub-task-two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;stt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;task-two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now checking for the values mean using &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;s. Many times its trivial.
Sometimes the nesting can go deep and it becomes messier. When we &lt;em&gt;think&lt;/em&gt; about
what to do with these arguments, we think in terms of what each possible
combination is going to do. We think about doing something when we get &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;
AND (&lt;code class=&quot;highlighter-rouge&quot;&gt;sub-task-one&lt;/code&gt; OR &lt;code class=&quot;highlighter-rouge&quot;&gt;sto&lt;/code&gt;). Can we directly expose this to our program so
that its readable? Surely, we could do&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub-task-one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This approach does more than nesting &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s because the first test
(&lt;code class=&quot;highlighter-rouge&quot;&gt;args[&quot;task&quot;]&lt;/code&gt;) is happening many times, but lets not worry about that since
its not really a heavy computation. There is a repeating pattern here of
&lt;code class=&quot;highlighter-rouge&quot;&gt;args[&quot;&amp;lt;&amp;gt;&quot;]&lt;/code&gt;. Repeated patterns are good for machines, but not for us. Its not
that this tiny piece is hurting the readability, its just that I didn’t think
about this thing in my mind while planning to code. This thing actually came in
when I did the transformations from my plan to a computer acceptable construct.
Can we get rid of this then? A quick and simple fix is the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub-task-one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What the function &lt;code class=&quot;highlighter-rouge&quot;&gt;check_args&lt;/code&gt; does is to collect all the parameters after
&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; and put them in a list (call it &lt;code class=&quot;highlighter-rouge&quot;&gt;*argv&lt;/code&gt;). Each of the items in that list
is considered to be joined by &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;s and the next level of nesting is joined by
&lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt;s. These computations are done by &lt;code class=&quot;highlighter-rouge&quot;&gt;getting&lt;/code&gt; the corresponding value of the
string (the key) from &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; dictionary. This is fine. Probably will need some
level of familiarity with the usage but its okay for this trivial case. What
about a deeper level of argument nesting? In that case, for each list at any
level, we could add a string representing the operation to apply on the list
like &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;. For more complex transformations and when the arguments are
not just boolean, instead of adding a string, we can just pass a function like
the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;subtask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;st&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See whats happening here? Our arguments are slowly beginning to take form of
code themselves. Nothing wrong in that. But this is not really natural for
Python and it looks out of place from the rest of the code as it needs a
different mental model of whats happening here. Consider the same as a macro in
Hy:&lt;/p&gt;

&lt;div class=&quot;language-common-lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;check-args&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;func2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;subtask&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;st&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The macro is also doing the same transformation of replacing the strings with a
&lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; corresponding to the dictionary &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;, which is something like &lt;code class=&quot;highlighter-rouge&quot;&gt;(get
args &quot;string&quot;)&lt;/code&gt;. But its doing nothing other than that. Just like I &lt;em&gt;thought&lt;/em&gt;
about the transformation. My first thought was to just run &lt;code class=&quot;highlighter-rouge&quot;&gt;(func1 &quot;task&quot; (func
&quot;subtask&quot; &quot;st&quot;))&lt;/code&gt; by using &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; as the context for interpreting the strings.
This is not so in the case of a function. The mental model here is simpler
because there is essentially just one, viz. of &lt;em&gt;s-expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The point is this, programming involves transforming our thoughts to code
constructs and then writing them. Occasionally the output of our transformations
get slightly messy and its feels bad to keep repeating the transformations.
Making functions first class citizen puts us one level up while doing these
transformations. Making code itself first class citizen puts us even higher.
Considering you don’t actually think in Python and are transforming your plain
thoughts to code, the transformations like in the examples shown above are not
at all natural to the approach of &lt;em&gt;just&lt;/em&gt; writing functions. Using
&lt;em&gt;s-expressions&lt;/em&gt; we get a sweet spot of representation between what is
sufficiently high level and what is understandable by a computer and allows us
this syntactical freedom which is immensely beautiful to peruse, like a
rhetorical device.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You shouldn’t write a newspaper with poetic constructs because not everyone is
looking to untangle a string of pearls every morning, however beautiful they
might be. Reading a newspaper is not exactly &lt;em&gt;reading&lt;/em&gt; as in &lt;em&gt;“joyfully
devouring words”&lt;/em&gt;, its more of an information gathering mechanism and will go
out of fashion if we invent something like an &lt;em&gt;information&lt;/em&gt; drink.&lt;/p&gt;

&lt;p&gt;There is a certain reason I wasn’t seeing the importance of syntactical macros
and it is the same reason non-standard constructs are avoided in popular
programs. Probably its the same reason it will never be in popular usage for
specific domains. A domain has certain needs which, when satisfied, remove the
need of syntactical extensibility. SQL queries won’t be replaced by Lisp because
if you are going to recreate SQL syntax with Lisp, why even bother with the
switch in the first place? Its only when you crave for extensibility, which is
not very often in practical cases, does it actually reveals its true beauty.&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/297/&quot;&gt;
&lt;img src=&quot;https://imgs.xkcd.com/comics/lisp_cycles.png&quot; /&gt;
&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://xkcd.com/297/&quot;&gt;xkcd - 297&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The most popular languages are the ones with most set standards, certain
important constraints and a lot of directly visible applications (not implying
causality of the opposite side) and they keep gaining traction since its easier
to get started and get going. To focus on the real problem we are solving. But
sometimes, its good to just lay back and play around with the words till they
entertain us on a very personal level. None of what I said is something new
which others haven’t already said about Lisp. The new thing, is just my personal
realization of these facts. I don’t actually believe now that I am seeking
anything like performance (&lt;code class=&quot;highlighter-rouge&quot;&gt;Hy&lt;/code&gt; has certain overheads, although &lt;code class=&quot;highlighter-rouge&quot;&gt;common-lisp&lt;/code&gt; is
crazy fast if used properly) or better productivity (though this is looking like
a very visible long term side effect) with any of the Lisp variants I am
using/going to use but just pure beauty. Probably it will stay that way for a
long time.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 May 2017 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2017/05/15/syntactical-macros/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/05/15/syntactical-macros/</guid>
      </item>
    
      <item>
        <title>Projects</title>
        <description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;M&lt;/span&gt;y lists of &lt;em&gt;things-to-do&lt;/em&gt; have been monotonically
increasing since the time I started maintaining such lists. There are
many plans to execute, things to learn and ideas to explore. Around last week or
so, I found this pretty relatable post on Reddit.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote class=&quot;reddit-card&quot; data-card-created=&quot;1489396976&quot;&gt;&lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/5x64jl/oh_look_a_new_project_idea/?ref=share&amp;amp;ref_source=embed&quot;&gt;Oh
look, a new project idea!&lt;/a&gt; from &lt;a href=&quot;http://www.reddit.com/r/ProgrammerHumor&quot;&gt;ProgrammerHumor&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//embed.redditmedia.com/widgets/platform.js&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Seeing myself out there, its important to know what makes me jump &lt;em&gt;off&lt;/em&gt; from or
&lt;em&gt;into&lt;/em&gt; and idea. I believe I have seen two kinds of works. The first type has
something in the details that touches you. Something that comes after you start
working on it. An &lt;em&gt;in-chore&lt;/em&gt; challenge that stimulates. Many of these are things
you do for a living or something that you &lt;em&gt;have to do&lt;/em&gt;. The second type touches you
directly on a more personal level. All your personal projects which start with a
‘&lt;em&gt;this will be pretty slick&lt;/em&gt;’ realizations come here.&lt;/p&gt;

&lt;p&gt;To start with, the first type tasks usually come with implicit deadlines
and are usually well structured in the sense that you can take 10 minutes and
lay out a solid execution plan for the next 10 hours of work time. This results
in a direct point of entry, either the deadline, or the concrete plan. The
second type pulls you in because of its personal appeal.&lt;/p&gt;

&lt;p&gt;As far as turn offs are considered. The first type, being drier to you as a
whole, just needs a ‘&lt;em&gt;nothing stimulating left to do&lt;/em&gt;’ state. For the second
one, the appeal gets attenuated and the starting realization starts to look
meager in magnitude than a &lt;em&gt;newer&lt;/em&gt; idea. Both of these deteriorate the overall
quality of outcome. In first case its because the work is mostly done near deadline.
In second, its because no real progress is actually made. This cycle moves round
and round and nothing much happens in general, even with all the lists stripped
naked. This phase of indecision goes on for days with me. Hand waving at things
without actually touching them. More touchpad than keyboard.&lt;/p&gt;

&lt;h2 id=&quot;micro-tasks&quot;&gt;Micro tasks&lt;/h2&gt;

&lt;p&gt;A possibly promising way is to knit a tiny list of &lt;em&gt;micro tasks&lt;/em&gt; for tomorrow
with some quick and concrete steps to be taken for certain works. This will let
me start off by getting in the working cycle and will keep indecision at bay.
For the first type, this will keep the lamp lit. There is something to do so I
don’t &lt;em&gt;get out of it&lt;/em&gt; and then stay sulky for weeks. Also, the final output would
be a result of thoughts spread out over a longer period of time than last few
days of the checkpoints. For second type, a tiny list reinforces the idea by
making it more real. Hitting the real issues while actually working on something
is not encouraging. The time that goes in making the list doesn’t get counted
towards a burnout and shapes the project in a better way, incrementally.&lt;/p&gt;

&lt;p&gt;I have started to manage my lists in separate &lt;em&gt;agenda views&lt;/em&gt; these days. There
are stuck projects, which don’t have any &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; state associated with them.
These need a little bit of planning to pry out a few well defined &lt;code class=&quot;highlighter-rouge&quot;&gt;TODOs&lt;/code&gt;. These
are defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;org-stuck-projects&lt;/code&gt; as (skipping &lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;micro&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;old&lt;/code&gt; tags):&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; Avoid duplicating micros&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-tags-exclude-from-inheritance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;micro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; Define stuck projects&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stuck-projects&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+LEVEL=1/-DONE&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;micro&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;old&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;org-agenda-custom-commands&lt;/code&gt; allows creating a dashboard for these
lists. For projects (key &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;), I am interested in the micro tasks, the usual
&lt;code class=&quot;highlighter-rouge&quot;&gt;TODOs&lt;/code&gt;, all the currently active (being touched recently) 5-10 projects, the
ones which don’t have a defined way out (&lt;code class=&quot;highlighter-rouge&quot;&gt;stuck&lt;/code&gt;) and the ones which are too
old. Translating to custom agenda commands, these go like:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-agenda-custom-commands&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Main agenda with micro tasks&quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;micro&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Micro tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;agenda&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Projects to work on&quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;micro&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user-project-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Micro tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TODO&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user-project-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;active&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user-project-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Active projects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stuck&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user-project-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Needs action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;old&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user-project-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Too old&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Upcoming deadlines&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;agenda&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-entry-types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-deadline-warning-days&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-time-grid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-agenda-overriding-header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Upcoming deadlines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The plan is to start with &lt;code class=&quot;highlighter-rouge&quot;&gt;micro&lt;/code&gt; tasks, move onto usual &lt;code class=&quot;highlighter-rouge&quot;&gt;TODOs&lt;/code&gt; and cycle stuck
projects under &lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt; to keep everything fresh.&lt;/p&gt;

&lt;p&gt;This should work better. Probably.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2017/03/15/projects/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/03/15/projects/</guid>
      </item>
    
      <item>
        <title>Optional typing</title>
        <description>&lt;p class=&quot;post-intro&quot;&gt;
My experiences with static type checking. More specifically, I try to argue
how a dynamic typed language can get help from optional (gradual) typing
using mypy as example.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt; recently
tried &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; for a project. Essentially,
it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradual_typing&quot;&gt;gradually typed&lt;/a&gt; superset
of JavaScript. Originally intended for learning, the switch immediately felt
empowering. Not that TypeScript is necessarily better (haven’t used it enough to
say that) but for a long time python user like me, (pushed) optional type
annotations is refreshing.&lt;/p&gt;

&lt;p&gt;Python is one of the popular dynamic typed languages. Not specifying data types
like &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; allows for simpler programming and faster prototyping,
making it easy to learn. Its not just about being simple
though, &lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot;&gt;duck typed&lt;/a&gt; languages have
their share of benefits which are regularly exploited by the users.&lt;/p&gt;

&lt;p&gt;Recent python versions have been pushing through a new change. Python now
provides type hinting support using a now
stable &lt;a href=&quot;https://docs.python.org/3.6/library/typing.html#module-typing&quot;&gt;typing&lt;/a&gt;
module. I never really cared about types in Python because, well, thats what I
probably have been avoiding by using Python all along. But this is slowly
changing as I use static typing more and more.&lt;/p&gt;

&lt;h2 id=&quot;reading-your-own-code&quot;&gt;Reading your own code&lt;/h2&gt;

&lt;p&gt;I enjoy cricket and Emacs. So wrote up a
package, &lt;a href=&quot;https://github.com/lepisma/cricbuzz.el&quot;&gt;cricbuzz.el&lt;/a&gt;, for displaying
cricket scores in Emacs. It basically is a web scraper
for &lt;a href=&quot;https://www.cricbuzz.com/&quot;&gt;cricbuzz.com&lt;/a&gt;. Occasionally, there are changes
to the web page structure and I have to do a little bit of tweaking.
It was broken recently and I had to fix it a few months back. Here is one of the
changes I did&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header-node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data-nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;col-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header-node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row-nodes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data-nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header-node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data-nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;col-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-remove-item&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header-node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row-nodes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data-nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I don’t know what changed in the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;data-nodes&lt;/code&gt;. Don’t even know what it
holds. The only thing I know is that it contains html elements parsed to
form S-expressions and contains structured data scraped from the website.
The fix works for now but this thing will bug me badly again when something
changes. Knowing that enforcing a structure in html is hard, the point here is that it is
important to know what the symbols contain in your code. This is really helpful
for maintaining the code over a long period of time, or when there are too many
pieces to keep track of.&lt;/p&gt;

&lt;p&gt;There are two things really that are usually done to solve these issues:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Documenting functions, variables&lt;/li&gt;
  &lt;li&gt;Using helpful names&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Helpful names are helpful. But they can get weird. There are understandable
limits to them. Documentations, specially function docs are more helpful.
Usually you add data types for the arguments in the docstring too. Like this
(numpy style):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noot_noot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pingu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_noots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    
    Parameters
    ----------
    pingu : Pingu
        A pingu object
    n_noots : int
        Number of times to noot
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This helps in knowing what is going to happen in the function. This also gets
parsed by a documentation generator
like &lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;sphinx&lt;/a&gt; so the types specified in
here end up being useful. But they still are pretty passive. There is no way
anyone could stop you from writing this&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;noot_noot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pingu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Not until runtime that is.&lt;/p&gt;

&lt;p&gt;Notice the function again. The definition line itself is pretty much self
explanatory (thanks to variable naming). There are many similar cases in
practice which need &lt;em&gt;just a little bit&lt;/em&gt; of hint about data types to clarify their
tasks. “Type hinting” fills in this sweet spot and at the same time flags logical
bugs like passing &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; is expected.&lt;/p&gt;

&lt;h2 id=&quot;type-hinting&quot;&gt;Type Hinting&lt;/h2&gt;

&lt;p&gt;Type hinting is the idea of adding annotations about data type for variables,
function arguments etc. These are usually parsed and checked before runtime
and usually are similar in spirit to something like automatic spell-checkers.
Doing this helps in marking inconsistencies in variables which flow around here
and there. I came to know about type hinting from JavaScript. There
is &lt;a href=&quot;https://flowtype.org/&quot;&gt;flow&lt;/a&gt; which lets you add hints in plain JS without
much intrusion and strip them off using something
like &lt;a href=&quot;https://flowtype.org/docs/running.html&quot;&gt;babel&lt;/a&gt; in the compilation step.&lt;/p&gt;

&lt;p&gt;Here is a sample taken from flow’s homepage.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// @flow&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You drop hints when needed and running &lt;code class=&quot;highlighter-rouge&quot;&gt;flow&lt;/code&gt; gives you the error it detects&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3:   return x.length;
            ^^^^^^^^ number. This type is incompatible with the expected return type of
2: function bar(x): string {
                    ^^^^^^ string
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then there is TypeScript which behaves more like a superset of JS but with
the same idea. Your development process gets assisted by static types and then
the code gets converted to plain JS and runs &lt;em&gt;like a duck&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mypy&quot;&gt;mypy&lt;/h2&gt;

&lt;p&gt;Although not that popular, Python has in-language support for adding type hints
which can be checked by something like &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;. What this
means for our example is that you could do something like the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noot_noot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pingu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pingu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_noots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;noot_noot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pingu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This time, running mypy gives the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Argument 2 to &quot;noot_noot&quot; has incompatible type &quot;float&quot;; expected &quot;int&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running this code itself will not give any error if there is nothing in
&lt;code class=&quot;highlighter-rouge&quot;&gt;noot_noot&lt;/code&gt; which relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;n_noots&lt;/code&gt; not being a float (for example
&lt;code class=&quot;highlighter-rouge&quot;&gt;range(n_noots)&lt;/code&gt;). This is &lt;em&gt;just&lt;/em&gt; handy for something as trivial as this. But
gets really useful when you have a lot of structured data going in and out of
things.
The &lt;a href=&quot;https://docs.python.org/3/library/typing.html#module-typing&quot;&gt;typing&lt;/a&gt; module
provides many primitives to build tailored types. For example, if my program
works with geographical coordinates (a pair of numbers) of cities (string), I
could do something like the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Coordinate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minimum_trip_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the nice name of the type which helps in identifying the associated
object. We know whenever there is &lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinate&lt;/code&gt; that its going to be pair of
floats and not
more. mypy’s support for types can be seen in
its &lt;a href=&quot;http://mypy.readthedocs.io/en/latest/kinds_of_types.html&quot;&gt;doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few reasons other than the already helpful type checking to use these
hints:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Its not really much to write and actually saves keystrokes as compared to
writing unnecessary and passive documentation strings.&lt;/li&gt;
  &lt;li&gt;It avoids runtime overheads as compared to defining a logical type using a
dummy class.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are concerns about the readability of code as such when using hints as it
goes against python’s philosophy. I feel like readability should not be judged
by how it looks to a non-programmer but to a python programmer. Its easier for
me to read that a function takes coordinates (which is known to be a pair of numbers
since I decided to read the code dealing with geography) rather than an argument
described solely by its name and / or docstring.&lt;/p&gt;

&lt;h2 id=&quot;keeping-it-optional&quot;&gt;Keeping it Optional&lt;/h2&gt;

&lt;p&gt;Typing is something that feels like it comes attached with performance benefits.
But using mypy for around a month now has convinced me that just the
documentation part is reason enough to use it here and there. It helps keep
track of tiny things like whether I am passing &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;stream&lt;/code&gt; when a
function works on a file. This itself has reduced the load on variable naming
for me a lot. Also, if you are not writing a hackish script, it does help to put
barriers at places to frame the program.&lt;/p&gt;

&lt;p&gt;Most importantly, it really is non-intrusive and purely optional. You could use
hints wherever needed and skip where is it unnecessary and verbose (though I am
not sure if this is a recommended practice).&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Static type checking in python is not &lt;em&gt;that&lt;/em&gt; popular as compared to JS.
But JS community is particularly
&lt;a href=&quot;https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.yehrvien7&quot;&gt;well known&lt;/a&gt; to
quickly get hands on new technologies. The python community is somewhat
different. The users have different expectations from the language and the
language has molded itself to be easy for the users. To elaborate on this: you
won’t
see &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498&quot;&gt;f-strings&lt;/a&gt;
getting hugely popular right away because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the users don’t care about it if the older ways are working (&lt;code class=&quot;highlighter-rouge&quot;&gt;format()&lt;/code&gt; or
similar in this case)&lt;/li&gt;
  &lt;li&gt;packages / libraries supporting &lt;a href=&quot;https://babeljs.io/&quot;&gt;babel&lt;/a&gt;-ish ideas are not
that common to find in python. Even if you are &lt;em&gt;living on the edge&lt;/em&gt; kind of
person, you can’t just go on your way that easily. (Though I would blame the
v2-v3 divide for this)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than that, support for 3rd party modules is not that extensive as of now.
There is &lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt; but doesn’t compare to
something
like &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;/a&gt;. But
this really is a reflection of how popular type hinting is. If not many are
going to use it, there will always be lesser stubs in there.&lt;/p&gt;

&lt;p&gt;Of course your IDE / editor needs to support on-the-fly type checking to actually
be helpful. Emacs has &lt;a href=&quot;http://www.flycheck.org/en/latest/&quot;&gt;flycheck&lt;/a&gt; which has an
&lt;a href=&quot;https://github.com/lbolla/emacs-flycheck-mypy&quot;&gt;extension&lt;/a&gt; for adding mypy as a
checker. PyCharm
also
&lt;a href=&quot;https://www.jetbrains.com/help/pycharm/2016.3/type-hinting-in-pycharm.html&quot;&gt;supports&lt;/a&gt; it.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 -0500</pubDate>
        <link>https://lepisma.github.io//2017/03/05/optional-typing/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2017/03/05/optional-typing/</guid>
      </item>
    
      <item>
        <title>Cheap polyglot notebooks</title>
        <description>&lt;p class=&quot;post-intro&quot;&gt;
As compared to json based jupyter notebooks, Emacs org-mode provides a much more
readable and lighter notebook with multiple language support using org-babel.
Just like RMarkdown, but in Emacs.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;R&lt;/span&gt;Studio v1.0
is &lt;a href=&quot;https://blog.rstudio.org/2016/11/01/announcing-rstudio-v1-0/&quot;&gt;released&lt;/a&gt;. One
of the key features is
the &lt;a href=&quot;http://rmarkdown.rstudio.com/r_notebooks.html&quot;&gt;notebook&lt;/a&gt;. Yes, there is
a &lt;a href=&quot;https://irkernel.github.io/&quot;&gt;Jupyter kernel&lt;/a&gt; for R, but this is probably
going to be much better.&lt;/p&gt;

&lt;p&gt;The idea of having interactive notebooks is not really new. Mathematica had it
before I was born or something. IPython and then Jupyter
brought these to the mainstream. Now almost every product on these lines have great
many features including cool visualization support, multiple kernels (many in
the same notebook) etc. You have some big products
like
&lt;a href=&quot;http://beakernotebook.com/&quot;&gt;beaker&lt;/a&gt;, &lt;a href=&quot;https://zeppelin.apache.org/&quot;&gt;zeppelin&lt;/a&gt;
and of course &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Everything is fine. But I don’t particularly enjoy it when I accidently open a
notebook in my editor and its a mess of JSON waiting to force me into believing
that its just a set of simple scripts I wrote to do something much simpler
than&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;working interactively with large and complex datasets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://rmarkdown.rstudio.com/&quot;&gt;R Markdowns&lt;/a&gt; shine here. They are by default
cleaner to read. So that’s a plus. What else do you need? Well, R is not a
general purpose language. Neither is python good for everything. A notebook
supporting multiple languages? That will work. But then they are too heavy to
open up everything and get going. Honestly, they are not targeting your tiny
scripts crossing and piping data over language barriers to make sense of your
local files or sating your fussiness for
using &lt;a href=&quot;http://docs.python-requests.org/en/master/&quot;&gt;requests&lt;/a&gt;
over &lt;a href=&quot;https://github.com/request/request&quot;&gt;request&lt;/a&gt;. Notebooks simply have great
overheads for small experiments with random jumble of scripts.&lt;/p&gt;

&lt;h2 id=&quot;org-babel&quot;&gt;Org-babel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://orgmode.org/worg/org-contrib/babel/&quot;&gt;Org-babel&lt;/a&gt; is
an &lt;a href=&quot;http://orgmode.org/&quot;&gt;Org-mode&lt;/a&gt; thing for running chunks of code in Org
files. You could add language chunks, like in R Markdowns, and execute those with
optional shared sessions or variable passing. So, for example, you could get
around with your &lt;em&gt;ggplot envy&lt;/em&gt; while using Python
(at least until &lt;a href=&quot;https://github.com/altair-viz/altair&quot;&gt;altair&lt;/a&gt; goes on big).
Anyways, the point is not heavy plotting (those are much better on web based
UIs), its the speed with which you can play around with your ideas inside org
files.&lt;/p&gt;

&lt;p&gt;You could use JS, Python and other languages with great packages and weave them
with your writings or class notes in Org with &lt;script type=&quot;math/tex&quot;&gt;\LaTeX&lt;/script&gt;. Additionally, being
inside Emacs, you could exploit Emacs lisp and Org to have cool side effects with
ease. For example, shifting your scheduled tasks depending on weather gathered
using python requests. Obviously there are other ways. Get data with Elisp
itself, or use something like &lt;a href=&quot;https://github.com/bjonnh/PyOrgMode&quot;&gt;PyOrgMode&lt;/a&gt;.
But you might really love &lt;em&gt;requests&lt;/em&gt; for http things and want to use Emacs’
buffer manipulation for writing to files. And you might want this weather
dependent org agenda file to be self contained. Or you are of the other
type and might be okay with firing up (or planning to) different processes and
piping everything externally.&lt;/p&gt;

&lt;p&gt;I recently started trying out Babel for some of the use cases involving
web-scraping, some &lt;em&gt;pythonish&lt;/em&gt; things, some directory restructuring and some
planning and writing. As of now, I am really enjoying the neat polyglot
&lt;em&gt;notebookish&lt;/em&gt; properties with great many freedoms for plumbing code with prose.&lt;/p&gt;

&lt;p&gt;Here is a quick preview for generating some results in Python&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#+NAME: chunks&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+BEGIN_SRC python :results silent&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;moon moon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pepe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;grumpy cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chunks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://google.com/search?q=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; meme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunks&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You have your usual org code block with few specifications (like &lt;code class=&quot;highlighter-rouge&quot;&gt;NAME&lt;/code&gt; for variable
name to be used for the block result). Essentially this snip is counting Google
search hits for “[name] meme” for different &lt;code class=&quot;highlighter-rouge&quot;&gt;names&lt;/code&gt;. It uses &lt;em&gt;requests&lt;/em&gt; to get
the search results. Now for parsing the HTML element which says something like “About
100 results found”, lets pass the results to JS&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counts&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BEGIN_SRC&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunks&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cheerio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cheerio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;cheerio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#resultStats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/,/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;END_SRC&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RESULTS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counts&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;doge&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;735000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;moon moon&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3420000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pepe&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;775000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grumpy cat&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1250000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nice. It works. We could go back to python and do a frequency plot because we
have problems counting number of zeros.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#+BEGIN_SRC python :var counts=counts :results file :export both&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sns&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xticklabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plot.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;plot.png&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+END_SRC&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure&gt;
&lt;a href=&quot;/images/posts/babel/pyplot.png&quot; data-lightbox=&quot;method&quot;&gt;&lt;img src=&quot;/images/posts/babel/pyplot.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;There are many languages supported and you have the
usual org structures like tables and lists for mediating chunks. The working
model is really simple. Even the plotting is nothing more than writing to file
and displaying with the usual org-inline image toggle. But, that is
expressive enough. Here is another screen using R and ggplot (plot taken
from &lt;a href=&quot;http://docs.ggplot2.org/0.9.3/stat_binhex.html&quot;&gt;hexbin&lt;/a&gt; example). You
could also put in something weird like C++.&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;/images/posts/babel/rplot.png&quot; data-lightbox=&quot;method&quot;&gt;&lt;img src=&quot;/images/posts/babel/rplot.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;All in all, these files are cheap, readable and usable. Exportable to any format
imaginable. And these integrate deeply with your usual Emacs + Org-mode workflow.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Org files are not ‘the’ polyglot notebooks. They don’t solve everything and of
course not everyone uses Emacs. They are limited in many aspects, for example
visualizations. But they let you do a few things in a &lt;em&gt;notebookish&lt;/em&gt; manner which
would have been a mess otherwise.&lt;/p&gt;

&lt;p&gt;I used to do &lt;em&gt;many&lt;/em&gt; things in Jupyter notebooks before I learned easier
non-python alternatives for quick tasks. Some time after that I switched to
Emacs and realized I don’t like editing in browser that much and
the &lt;a href=&quot;https://tkf.github.io/emacs-ipython-notebook/&quot;&gt;ipython-notebook mode&lt;/a&gt; was
not much fun either. Org-babel looks great now. It sits nicely in between and
fills many gaps. In case you are having certain likelihood of getting hooked too,
try these &lt;a href=&quot;https://github.com/dfeich/org-babel-examples&quot;&gt;samples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.githubusercontent.com/lepisma/6157074b8cec0eecfcc97555ac72289c/raw/ca39f3715b714d28ff138c49946b2188bf00e7f5/ob.org&quot;&gt;Here&lt;/a&gt; is
the notebook I used.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2016/11/02/org-babel/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2016/11/02/org-babel/</guid>
      </item>
    
      <item>
        <title>Abusing Evidence: Drought, Deluge and Disregard</title>
        <description>&lt;style&gt;

.video-wrapper {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%;
}

.video-iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

&lt;/style&gt;

&lt;p class=&quot;post-intro&quot;&gt;
Three recent events. Each trying to push psuedo-science using different
approaches. But with a common element of grayness in how they discuss topics
related to science.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Warning: This post contains strong language at places. Its also long.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;eird things happen when you are at home. You get
to talk to &lt;em&gt;real&lt;/em&gt; people and get out of your utopic daydream. I have recently
been unable to argue with people on a few topics. I wonder if I am getting too
old for this shit. Most of these happen when I touch a &lt;em&gt;gray&lt;/em&gt; portion of
certain communicated opinions. It gets hard to convince people about a general
sense of blackness or whiteness. In every argument, you can easily weasel out
solid points for your favour. And if people have even a single point in favour,
they are willing to stick it with their sense of identity and refuse to accept
any change. (I need an ego deflation session, mail me)&lt;/p&gt;

&lt;p&gt;Some cases are easy to argue against. You just roll your eyes. Some are
not-so-easy. Let me give a general sense of what type of content I am talking
about. Consider vegetarian and non-vegetarian eating habits. Simplest of the
arguments will split opinions among factions. The neutrals are easy to get
baptized to either side. Only when you give enough time, the fog begins to clear.
Till then, the arguments go on like meteor showers. Never hitting anything. Its
not necessary that one side is ultimately right and other is wrong. But there
is something special about the ways bad arguments work here, which makes it
easy to know who is putting real arguments and who is shuffling flip-flops.
Meanwhile the flip-flop guy isn’t aware of things and has trust on the points of
virtue of his / her cause. This makes it hard. &lt;em&gt;“Hey you are being good, but its
not the right way”&lt;/em&gt;, ever heard this work?&lt;/p&gt;

&lt;p&gt;Things boil down to poor journalism and communication. Information communication
is how you learn about things and use them to make arguments. Poor examples of
communication almost always mishandle evidence. I will mention 3 major cases
here that I repeatedly face.&lt;/p&gt;

&lt;p&gt;Before I begin, I want to specifically focus on the point that the topic of my
interest in all these cases, for this post, is the &lt;em&gt;presentation of information&lt;/em&gt;
and not the information itself. This post might also look like doing undue
exaggeration of the issue, I will try to convince you its not the case. Also, I
am no expert on many things and have been involved in stupidity pretty much
regularly. So don’t take things here as absolute truths, but opinions of sort.&lt;/p&gt;

&lt;h2 id=&quot;1-drought&quot;&gt;1. Drought&lt;/h2&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/285/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/wikipedian_protester.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;One of my relative forwarded the following message to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&quot;The Fact of Melatonin*
&lt;br /&gt;
Plz make it a point to sleep early... 😴😊
&lt;br /&gt;
Thats how God has made us... Sleep at night and work during the day...☺ Today I
learnt something new... A natural cancer vaccine.
&lt;br /&gt;
God placed in each and everyone of us a gland in our head called the Pineal
gland. It is considered to be the biological clock of the human body and it is
also connected to the sight nerve. It is small like the size of a pea. Everyday
after sundown this gland starts producing a substance called Melatonin which
runs in the bloodstream and protects the body from cancer. 😋
&lt;br /&gt;
This gland works only in the dark so if the eye is exposed to light the gland
does not work because it thinks night has not come yet...🤔 So if you stay up at
night in the light, you are depriving your body from this daily vaccine...
&lt;br /&gt;
Our parents and grandparents who used to sleep early in the night and wake up
early in the morning did not suffer from cancer or any of the disease we hear
about today.
&lt;br /&gt;
God has placed this daily vaccine in our body to protect us so let's put it to
use by sleeping early.💪
&lt;br /&gt;
The gland starts working from after dark until two hours before sunrise !!!🌞
&lt;br /&gt;
Must read and share this miraculous physiology God designed inside man... 😊😊😊&quot;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is there anything wrong here? If you are careful, you might find a few mistakes.
But someone sent you this with good intentions. Honestly, I am happy someone
other than my parents (ok, the sender was not one of my parents) give a damn
about when I put my head on pillow. And this message has no side effects and
isn’t really wrong, isn’t it?&lt;/p&gt;

&lt;p&gt;I know you have started hating me already. Anyways, what drives you to believe a
thing like this? Scientific evidence, right? Right?&lt;/p&gt;

&lt;p&gt;You might have heard of melatonin if you use some screen filter like
&lt;a href=&quot;https://justgetflux.com&quot;&gt;flux&lt;/a&gt;, &lt;a href=&quot;http://jonls.dk/redshift/&quot;&gt;redshift&lt;/a&gt;,
&lt;a href=&quot;https://github.com/raatmarien/red-moon&quot;&gt;red-moon&lt;/a&gt; etc. for filtering out
blueish lights in night. Melatonin gets released in darkness, has things with
sleep wake cycle and certain results find blue side of the spectrum affecting
its release. A well informed source for reading on the topic is
&lt;a href=&quot;http://skeptics.stackexchange.com/a/30730&quot;&gt;this&lt;/a&gt; answer. Notice how the
researches talk about statistical significance and uncertainties.&lt;/p&gt;

&lt;p&gt;What about cancer? Wikipedia usually does a good job for communicating popular
knowledge and opinions. By design it can be rigged by one side of a research. But,
when it notes a contradiction among results, you can be assured to find multiple
arguments floating around among researchers. Head over to the
Wikipedia article on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Melatonin#Cancer&quot;&gt;melatonin&lt;/a&gt;. First, there is not
much consensus. A bit of web search will tell you that there are few researches
supporting its assistance in certain forms of cancer (mostly breast cancer).
But in any case, the results never state it as a &lt;em&gt;‘vaccine for cancer’&lt;/em&gt;. Go on.
Mail me papers. Convince me. At least an &lt;em&gt;in-vivo&lt;/em&gt; trial that concludes it as a
cure for cancer. Even, many of the quacks (I know a few) use ‘maybe’ when
talking melatonin and cancer connection, because otherwise whats stopping them
from solving the whole world’s cancer with a
&lt;a href=&quot;https://duckduckgo.com/?t=lm&amp;amp;q=buy+melatonin+online&quot;&gt;cheap, over-the-counter medicine&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Oh, and you can also find pretty damn sure articles that say its a miraculous
thing against cancer. We will talk about those cases in section 2.&lt;/p&gt;

&lt;p&gt;How do you communicate a research which is not strongly established? Obviously
you factor in the risk and play it safe by saying that &lt;em&gt;“thing X might lead to
cancer”&lt;/em&gt;. &lt;em&gt;Might&lt;/em&gt;, because scientists are not sure. &lt;em&gt;Might&lt;/em&gt;, because the
explosive mutability of information can’t be controlled. &lt;em&gt;Might&lt;/em&gt;, because you
really understand the uncertainties and are willing to go an extra mile to
shackle the chains around us. But we say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Hey kiddo! We simplify things so people get it, get it?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;simplification&quot;&gt;Simplification.&lt;/h3&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/547/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/simple.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;No one can know everything. So we use a few tricks. We learn how to utilize
sources and do reasoning. In fact this is what we are taught in schools.
Everything else, you learn on the go. We work on coarse models of the world when
we can’t understand or afford a finer one.&lt;/p&gt;

&lt;p&gt;The model we use are made of bricks of a certain kind of framework that you
choose to be true. Like science, religion, morality etc. The model itself tries
to faithfully represent the observed behaviour of a certain system. For a
particular system, many models work, irrespective of the backing framework or
observational errors.&lt;/p&gt;

&lt;p&gt;Consider climate change. Established observations
&lt;a href=&quot;http://climate.nasa.gov/vital-signs/global-temperature/&quot;&gt;say&lt;/a&gt; that the
temperature is increasing globally over the years. Say we have to understand and
communicate this observation to the masses. We start by creating a model that
explains the observation. Now the analysts choose their weapon of choice and
create models with various levels of abstractions. Some go with hard atmospheric
sciences, some believe we are in a simulation and go with that, some work using
human morality and some with religion.&lt;/p&gt;

&lt;p&gt;Next, onto communication. Most of the frameworks have certain techniques to
abstract away their finest models so as to reach a wider audience. A common
method is used by religions in many practical cases which reduces their model
abstractions to simple human morality. When a writer tries to tell people about
a system, he / she uses a model which is approachable by the &lt;em&gt;target audience&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An airplane flies using its &lt;em&gt;‘certain kind’&lt;/em&gt; of wings. Want more?&lt;/li&gt;
  &lt;li&gt;The wings when &lt;em&gt;‘pushed forward’&lt;/em&gt; create a &lt;em&gt;‘situation’&lt;/em&gt; in air around it, that
makes it go up. Want more?&lt;/li&gt;
  &lt;li&gt;The wings are shaped in &lt;em&gt;‘such a way’&lt;/em&gt; that the air speed above and below it are
different and &lt;em&gt;‘an established theory’&lt;/em&gt; explains the observed lift. Want more?&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
  &lt;li&gt;Here is the actual documentation with mechanisms and &lt;em&gt;‘assumptions’&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice the quoted words. You can’t abstract away models without allowing
uncertainties, its a myth loved by most of the promoters of ancient-wisdom and
preachers that I know of. If you are able to, you model was fat and bloated. A
good communication lets you know at what level of abstraction you are reading
and how to shift up gears if you can afford it. More importantly, it makes you
able to ask the right sort of questions.&lt;/p&gt;

&lt;p&gt;Another kind of uncertainty comes with the research itself. Digging deeper makes
you see that there are many models, within a framework, competing to explain
observations using certain sub-frameworks. The original model creator warns you
about these. The assumptions are laid bare and the competing ideas are visible
to naked eyes. The person responsible for popularizing the model passes these
on faithfully to a higher abstraction level. The results are not statistically
significant? No issue. &lt;em&gt;“Mate, the scientists tried to compare this. The results
are slightly negative but more inconclusive. Though its nice to be safe”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Whenever you see an absolute truth walking down, descending from
heaven itself to grace the internet with its aura, you got a task at hand. Fish
out for uncertainties. You know they are there, they can’t hide if not for
assumptions (in which case, the assumptions can’t hide). Simplification doesn’t
take away uncertainties, but tries to save them.&lt;/p&gt;

&lt;p&gt;The content I mentioned in the beginning seems to have an idiosyncratic way of
simplification. Similar contents can be seen in their natural habitat of quick
witted media. IM forwards, social networking posts, micro blogs etc. I remember
this line from
&lt;a href=&quot;https://www.goodreads.com/book/show/17470674-fahrenheit-451&quot;&gt;Fahrenheit 451&lt;/a&gt;
talking about things that the characters were missing in the fiction&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Number one, as I said, quality of information. Number two: leisure to digest it.
[...]
&lt;/p&gt;
&lt;footer&gt;
&lt;cite title=&quot;Fahrenheit 451&quot;&gt;Faber - Fahrenheit 451&lt;/cite&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Leisure to digest comes with a responsibility of &lt;strong&gt;not&lt;/strong&gt; using the leisure to start
devouring another piece of information or throwing paper planes out of windows.&lt;/p&gt;

&lt;p&gt;The message I mentioned has following &lt;em&gt;non-factoid&lt;/em&gt; issues that hurt me (sorry
sender), despite my respect for the concern of the sender:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Swapping of model back end&lt;/em&gt;: A model must be passed on as it was created. We
can’t mix and match things to suite the prejudices of audience or ourselves.
Like in this case, some non-creationist atheist (like me) can get pissed off
and avoid reading the content altogether.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Term abuse, Vaccine&lt;/em&gt;: I remember a guy in train preaching people (college
juniors) that Newton’s law of gravitation is wrong and you can’t use that.
Apparently, someone didn’t use the right set of words while explaining him
the idea that theories have certain limits, assumptions and validity over
scale. And Newton’s law is not really adequate for some specific needs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Misinterpretation of data&lt;/em&gt;: Dying at 30 from T.B. saves
us from common old age death causes. Cancer too, yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Absolute facts&lt;/em&gt;: I can believe this message lies on the side where researchers
are certain about cancer effect, but then the reader should get hints for the
general disagreement, which is pretty much known (specially for the original
content creator).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;evidence&quot;&gt;Evidence&lt;/h3&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/925/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/cell_phones.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Evidence keeps wild information mutations in check. Its not so much about
actually putting up the citations before passing the message. Citations can also
be successfully abstracted. More important is to ensure that there is no drought of
evidence. Ensure that there are sufficient amount of them before passing on
information, or creating a higher level abstraction. And ensure that the receiver
bears the same comfort and responsibility with evidence.&lt;/p&gt;

&lt;p&gt;Evidence, not to be confused with observations, ties the whole model building
process together. Absence of evidence allows you to do mix and match, exaggerations,
misinterpretations and misjudgments.&lt;/p&gt;

&lt;p&gt;I mean, what would have been wrong if the message would be circulating without
the issues we talked about. Heeding to evidence would have kept the facts in
check (like whether Pineal gland or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Suprachiasmatic_nucleus&quot;&gt;SCN&lt;/a&gt; is known as the
‘clock’), would have included the required uncertainty of results, and even then
could have made the point it originally intended (making me sleep earlier). How
many people are now convinced that there is such a thing like &lt;em&gt;‘vaccine’&lt;/em&gt; for
cancer? How many people are assured enough to not look upon &lt;em&gt;‘Melatonin’&lt;/em&gt; on even
Wikipedia since the information provided is complete and absolute? How many
irrational nostalgic sentiments about healthy life of yesterdays have been
fueled again? How many people have been convinced that every move we make, is
against the grand scheme of someone’s God? In my personal experiences with
people, I can safely say, a hell lot!&lt;/p&gt;

&lt;h2 id=&quot;2-deluge&quot;&gt;2. Deluge&lt;/h2&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/906/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/citations.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;I was recently involved in a facebook discussion about effects of microwave on
food items. The issues included bad effects of microwave on food and carcinogenic
quality of plastic + microwave interaction. Without touching the topic, let me
tell you the state of the final facebook post. There are around 20 citations
floating around. Many of which are not going to affect the arguments. Sadly, the
original link shared was enough to convince most of us that its good science.
Citations, references, geeky words, what else do you need? I am sure not more
than 5 (not sure about the number) guys actually went through, or needed to look
at the citations. Also, I can assure you, many adventurous people who opened the
main link came out convinced that they were dealing with science. To put it
straight, many of us believe that there is no such thing as poor science.&lt;/p&gt;

&lt;aside&gt;
  &lt;p&gt;Let John Oliver &lt;a href=&quot;https://youtu.be/0Rnq1NpHdmw&quot;&gt;explain&lt;/a&gt; to you what kind of
cases I am talking about.&lt;/p&gt;

  &lt;div class=&quot;video-wrapper&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/0Rnq1NpHdmw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; class=&quot;video-iframe&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;Its different from the first situation. You ask for evidence and the first guy
will realize the lack and would go on the defensive. This case will throw
so many of them, however shallow, you will get almost convinced of the argument
because you can’t gather enough time to accept / refute them. The evidence
feels so solid on the surface, your mind will be confused whether they are
actually refutable if I do a web search with my &lt;em&gt;‘limited’&lt;/em&gt; knowledge. Finally you
succumb to &lt;em&gt;“better be safe than sorry”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can almost feel the shades of gray here. Promotion of science in the way
science intends is great, right? Look at all the T.V. programs, all the news
articles, everything is helping people to accept science in their daily lives. Look
again, and you can see an almost exuberant insincerity for evidence spilling
from the mouths of promoters. Of course not all of them.&lt;/p&gt;

&lt;h3 id=&quot;pseudo-science&quot;&gt;Pseudo Science&lt;/h3&gt;

&lt;p&gt;Take that microwave oven case. Here is the
&lt;a href=&quot;http://www.medicaldaily.com/microwaves-are-bad-you-5-reasons-why-microwave-oven-cooking-harming-your-health-250145&quot;&gt;link&lt;/a&gt;
that was shared. If you actually read that link, you might have already reached
&lt;a href=&quot;http://articles.mercola.com/sites/articles/archive/2010/05/18/microwave-hazards.aspx&quot;&gt;this article&lt;/a&gt;.
See how the content itself is similar to the melatonin message, but the
presentation is different. Obviously, this link will also
get to its level of WhatsApp forward, but its all pro-science in the article. This
one is trying hard to stand on the shoulders of giants. Evidence, references,
articles, numbers, bio-photons? food value? bio-information from sun? Microwave
ban in Russia? dioxins? Most of the times, these get convincing because of the
jargons, our fear to look beyond them and cherry picked exaggerations from
quacks.&lt;/p&gt;

&lt;p&gt;Go to some skeptic forums, they have good sources of information to read from
and they welcome heavy skepticism. Go to
&lt;a href=&quot;http://rationalwiki.org/wiki/Microwave_oven&quot;&gt;RationalWiki&lt;/a&gt;, search
&lt;a href=&quot;https://www.reddit.com/r/skeptic/search?q=microwave&amp;amp;restrict_sr=on&amp;amp;sort=relevance&amp;amp;t=all&quot;&gt;/r/skeptic&lt;/a&gt;
and
&lt;a href=&quot;https://www.reddit.com/r/DebunkThis/search?q=microwave&amp;amp;restrict_sr=on&amp;amp;sort=relevance&amp;amp;t=all&quot;&gt;/r/DebunkThis&lt;/a&gt;
(I have linked microwave specific results),
follow whatever points you can find against any argument. This is important, not
because I am convincing you to go against the original argument, but because in
cases with a deluge of superficial evidence, you will most like fail to notice
the &lt;em&gt;‘taken out-of-context’&lt;/em&gt; information, which you can learn only when you hear the
counter arguments. Hell! I don’t even want to link so many articles debunking
this. It would be sad. And ironic. You might say well, how do you know which
links are right, which links are wrong? I don’t. You can never accept any
content just as it is. But, you can have a prior belief about certain kind of
content which makes you focus your skepticism where its most needed. Go on, read
all the links you find. I am assured, after a while you can tell whether an
article has a higher chance of pseudo-science just by looking at its CSS. Its like
finding your perfect life partner. A beautiful breeze will touch you and put a
smile on your face (No kidding!).&lt;/p&gt;

&lt;p&gt;Pseudo science tries hard to look like real science. Uses all the tools used by
science. It tries to convince people using something it doesn’t understand. Just
a pinch of skepticism and the house of cards is destroyed.&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/765/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/dilution.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Consider homeopathy. Something that’s still pretty much established because people
didn’t try, or weren’t able to go through the ‘science’ thrown at them.
In case you are missing out, please read the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Homeopathic_dilutions&quot;&gt;basic principle&lt;/a&gt; of
homeopathy. Same case. Many of us claim its the real thing, without actually
knowing how and why, just because we were somehow ‘convinced’ of its
sciency-ness.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Water, water, every where,
&lt;br /&gt;
Nor any drop to drink
&lt;/p&gt;
&lt;footer&gt;
&lt;cite title=&quot;Samuel Taylor Coleridge&quot;&gt;Samuel Taylor Coleridge - &quot;The Rime of the
Ancient Mariner&quot;&lt;/cite&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Citations are not badges of authenticity, they are tools of abstraction
outsourcing. And when they are not helping in abstraction, there is no ‘other’
use you can conjure out of thin air for them.&lt;/p&gt;

&lt;p&gt;A few people who are good at conjuring the ‘other’ uses are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Quacks&lt;/em&gt;: Promoting their method of treatment, wellness etc. &lt;em&gt;The doctors&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Simple innocent beings&lt;/em&gt;: Afraid, distressed by the hammer of ‘science’.
&lt;em&gt;The patients&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Wannabe scientists&lt;/em&gt;: Don’t care much about the real thing if it serves the
public image and the inner scientist. &lt;em&gt;Vectors of disease&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The only people who are willing to listen fall in type 2. And they need access
to real consolidated evidence. A truckload of evidence is used most of the time
when you are not sure about whether any of them is right (independent of whether
the thing is actually right or wrong). A gross misinterpretation of scientific
method and communication.&lt;/p&gt;

&lt;p&gt;Consider the sources you are getting your information from. The sources which
support one pseudo-science are, by design, going to support other
pseudo-sciences if they feel like. See if you can find meaningless diversions
and misinterpretation of the evidence. Real bold scientific claims don’t come
in a &lt;em&gt;Buzzfeed&lt;/em&gt; list. They don’t devoid you of your ability to reach the
original research. They welcome it. Their basic hypothesis is clear and
analyzable. And they don’t mix inconsistent web sources to create a coherent
model of their liking.&lt;/p&gt;

&lt;p&gt;Of course, there are issues when you attack these sources. I already mentioned
the grayness of these arguments. You will definitely be able to find patches of
truth in the information provided and will wonder why I am being so diligent
with my attacks. I don’t need theories with doubtful validity claiming ‘&lt;em&gt;17 life
energies from sun that gives you food&lt;/em&gt;’ to convince me of Sun’s role. Just a
simple reminder of photosynthesis will do.&lt;/p&gt;

&lt;h2 id=&quot;3-disregard&quot;&gt;3. Disregard&lt;/h2&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Colgate
used to warn against Indian traditional ways of using salt &amp;amp; coal on teeth.
But now they actively endorse it &lt;a href=&quot;https://t.co/eYywXQpK4P&quot;&gt;pic.twitter.com/eYywXQpK4P&lt;/a&gt;&lt;/p&gt;&amp;mdash; Swami
Ramdev (@yogrishiramdev) &lt;a href=&quot;https://twitter.com/yogrishiramdev/status/766977569661054976&quot;&gt;August 20,
2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;Explore the tweet above (basically the linked image). Come back later. Look,
what arguments can be put here to favour both sides. Colgate told not to rub
abrasives on your teeth. Later they tried incorporating
&lt;a href=&quot;https://en.wikipedia.org/wiki/Activated_carbon&quot;&gt;activated charcoal&lt;/a&gt; in their
products in a form &lt;em&gt;they&lt;/em&gt; found better. On the other side, baba tells us about
this hypocrisy that companies regularly employ to sell stuff. Obviously, both
arguments are good and bad in different ways.&lt;/p&gt;

&lt;p&gt;Anyway, I see this message promoting two things&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There is a reason higher than scientific method to decide against or in favor
of a product. In this case, ethnocentrism, nationalism and other
similar ideas on different scales.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You shouldn’t feel a need to question anything if you are supportive of point
1.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You could argue that its just an example of healthy rivalry. But, do you see
this message driving people to go for the real knowledge about what should they use
for cleaning teeth, and in which form (&lt;em&gt;buy our toothpastes&lt;/em&gt;)? I don’t see it.
Maybe you could pry it out if someone is willing to reveal it. But do you think
people care when they are &lt;em&gt;attacked&lt;/em&gt; by foreign companies and are &lt;em&gt;loosing&lt;/em&gt;
their tradition?&lt;/p&gt;

&lt;p&gt;Now, Baba gave us cool exercises. Great. Cheaper products don’t hurt me. Neither
do I get a heart stroke when one company gives competition to other
established players. But on what cost to the popular thinking? I have seen
people actually getting conscious about health and that’s cool. But no one can
amputate my head as if I don’t give a damn about who controls my thoughts and
stories. I live in a country that has &lt;em&gt;earned&lt;/em&gt; its independence and I know what
emotions you can stir when you invoke nationalistic ideas. Talk about eternal
cultural superiority, shout national slogans, appeal to ancient science and you
get an army of martyrs without cause, ready to sabotage the people who ask “why”.&lt;/p&gt;

&lt;p&gt;The questions people need answers to are innocent. They aren’t against anything,
as presumed by the preachers. They are just questions. But the techniques of
preachers doesn’t have anything but disregard for them. You don’t need to talk
about evidence, because they are talking much above these petty issues.&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/154/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/beliefs.jpg&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Advertisements do this all the time. They look for what sells and target
advertisements that way. There are pockets of worshippers built around products
and logo badges. By design and diversity, usually these pockets keep things
chaotic (though I accept there is a certain drift over time). But I am yet to
hear a person asking me to buy a certain biscuit by a certain company because of
a reason other than what the ingredients label yell or certain offers indicate.
Sure there is congenital imbecility to account for, but I have strong reasons to
believe that I can at least reason around with them.&lt;/p&gt;

&lt;p&gt;I mean, I would just say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Hey, you ain’t gaining nothing by buying truckload of
this biscuit that comes with x amount of mobile recharge, cause you are an
amnesiac moron who doesn’t remember when was the last time you &lt;strong&gt;enjoyed&lt;/strong&gt; its
taste.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This works in theory and, most of the time, in practice. Let me tell you
why. Because you didn’t sell your soul to a certain school of thought with
weird set of priorities. Because your product decisions don’t tie to and create your
identity. Because a demagogue can’t yell a battle cry, right or wrong, and take
control of your life decisions.&lt;/p&gt;

&lt;h3 id=&quot;cults&quot;&gt;Cults&lt;/h3&gt;

&lt;p&gt;I have absolutely no problem with product promotion based on actual quality.
But, we know a few entities that tend to differ here. I saw a roadside banner
for some mobile company InFocus that said something like &lt;em&gt;“Why buy Chinese, when
you can get American?”&lt;/em&gt; (I read this on billboards in Varanasi and Lucknow,
can’t seem to find it on internet. So, can’t assure if it was put by the company
or some local store. In case you have read it too, please send me a pic for
inclusion). Is this a good reason? Since I am not touching anything sensitive,
we can get neutral and reasonable answers for this particular advertisement. Its
no. You can have certain tendencies, but you don’t make decisions using them.&lt;/p&gt;

&lt;p&gt;The models we talked about, there can be many kinds that work. There are many
lapses in almost all the backing frameworks. Some accept the lapses, make way
for other models to move in action. &lt;em&gt;Morality&lt;/em&gt; and &lt;em&gt;Science&lt;/em&gt; complement each other
real good this way. Some don’t. And mainly the ones with most number of
deficiencies in term of framework capabilities. These framework claim to be
absolutely complete and purer than anything other. Complete. Right from their
inception to the present time, despite the popular knowledge that they visibly
mutate by piggybacking on badges of modern scientific developments (like quantum
physics, mail me if you want to know the secrets of the universe; I wonder what
would have happened if they had to popularize their ideas before 1920s).&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/1102/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/fastest_growing.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Cults like these feed on your personal prejudices. You might be a properly
functioning person, but when it comes to your cult, you share common, group
beliefs and it gets hard to listen to a voice of reason. The leaders are
charismatic. You might not see them doing anything bad, but it doesn’t work
out in practice. They patch your ignorance with some mumbo-jumbo and you feel
devoid of vulnerabilities. Pure. Complete. All knowing sentient entity free from
restraints. Floating in an eternal universe of bliss. Remember,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
There are no self-proclaimed villains, only regiments of self-proclaimed saints
&lt;/p&gt;
&lt;footer&gt;
&lt;cite title=&quot;Glen Cook&quot;&gt;Glen Cook - &quot;Chronicles of the Black Company&quot;&lt;/cite&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;No one’s wisdom is gonna bring salvation to you but yours. Your information
source should give you freedom to exercise your freedom. I remember a student
talking in my undergraduate university mess to someone that our ancient wisdom
tells to not sleep with your head pointing north pole (a myth promoted by &lt;em&gt;some&lt;/em&gt;
alternate med guys and traditionalists). Whats the issue? He is killing the
spirit of evidence by choosing a framework that disregards them. Also he is
hurting himself by choosing a B.Tech. in Electrical Engineering while apparently
having spent the time sleeping when someone was teaching about magnetic dipoles
in high school.&lt;/p&gt;

&lt;p&gt;The point is, if something tends to make you disregard the evidence by putting
on a faith-face or shoving your own moral fragility deep inside you, you say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aye, I got this covered! I am the king of xenophobes, but balance my biases
before making decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;aside&gt;
  &lt;p&gt;Another comic to balance the amount of text. Thanks &lt;a href=&quot;https://www.xkcd.com&quot;&gt;xkcd&lt;/a&gt;
for making our lives easier.&lt;/p&gt;

  &lt;figure&gt;
&lt;a href=&quot;https://xkcd.com/882/&quot;&gt;
&lt;img src=&quot;/images/posts/evidence/significant.png&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/aside&gt;

&lt;p&gt;Call me paranoid with &lt;a href=&quot;https://xkcd.com/386/&quot;&gt;SIWOTI syndrome&lt;/a&gt;. I am over
touching everything. Maybe I live among jerks and am butthurt. Maybe I just have
a dystopian fetish. This post shouldn’t have been this long. In fact this could
have been a much gentler tea-time conversation just like we regularly have on
climate change, vaccination, GMO etc. Ah! the wonderful evenings. But I am fed
up talking with people who just want to drink tea. Look around yourself, throw
pebbles in water. See what floats, what sinks. Try to foresee the long term
effects if circulations like these keep on going unrestrained by a few who give
a damn. Sure, you can argue that there is nothing presently ‘that’ harmful done
by these issues (though I disagree). But, boy! You will be sorry then because no
one will be able to question the conspiracy of silence when it hits you.&lt;/p&gt;

&lt;p&gt;First, look for evidence and the acceptance it receives in the content you got.
Second, see if the ‘science’ overwhelms you to a point where you risk accepting it as
granted. Third, check if somebody is sneaking a leash over how you are going to
analyze contents.&lt;/p&gt;

&lt;p&gt;More than abuses to evidence, these are abuses to our sanity
and intellect as a population. Even if melatonin saves you from cancer, even if
microwave oven gives you cancer or even if the cult fictions are the ultimate
facts, the point stays. Final verdict can’t be used to prove the righteousness
of fickle arguments.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This leads to that.&lt;/li&gt;
  &lt;li&gt;Scientists[1] say, this leads[2] to[3] that[4]. References.&lt;/li&gt;
  &lt;li&gt;This, because [&lt;em&gt;insert your cult leader’s wet dream&lt;/em&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ask yourself, if these contents pass through you unchecked, will you be able to
shed the guilt of depriving kids of genuine ‘curiosity’? Guilt of fooling people
into believing they are ‘scientists’? Guilt of closing your eyes to the truth
just because you are too lazy and want to be spoon fed by some know-it-all? Or
maybe its all meaningless and you already are in a cult with mechanisms for
redemption in place.&lt;/p&gt;

&lt;h5 id=&quot;edits&quot;&gt;Edits&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Changed ‘evidences’ to ‘evidence’. Thanks Rushil Nagda.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2016/08/25/evidence-abuse/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2016/08/25/evidence-abuse/</guid>
      </item>
    
      <item>
        <title>What is it that Genetic Algorithm does ?</title>
        <description>&lt;p class=&quot;post-intro&quot;&gt;
Genetic Algorithms face a ton of criticism. Rather than being a general purpose
optimizer, I believe GA is more suited to specific processes with a sensible
meaning to what evolution means there.
&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;B&lt;/span&gt;eing interested in heuristic optimization methods,
one thing I notice a lot is &lt;em&gt;confusion&lt;/em&gt; in the applicability and efficiency of
the methods. Mind you, I am not expert enough to resolve the doubts, but have an
opinion which might help in &lt;em&gt;‘some’&lt;/em&gt; situations. Ask around for methods to do
derivative free optimization and you will stop keeping the count after a while.
Specifically in the category of metaheuristics; &lt;em&gt;Cuckoo Search&lt;/em&gt;, &lt;em&gt;Genetic
Algorithm&lt;/em&gt;, &lt;em&gt;Stimulated Annealing&lt;/em&gt;, &lt;em&gt;Tabu Search&lt;/em&gt; etc. etc. But there is an issue.
Give the algorithms a first glance and you will feel they are different. Give
them a second glance and many of them will start to cluster in groups. Give a
third glance and they are different again!&lt;/p&gt;

&lt;p&gt;Earlier, due to the reducible design, I used to consider Genetic Algorithm (GA) as a
more general technique as compared to many other evolutionary methods. But then,
this might not be what we mean when we want a generally &lt;em&gt;applicable&lt;/em&gt; method.
A simplistic representation embodying the general principle, like
‘&lt;em&gt;mutation&lt;/em&gt; in population’ for population based heuristics, is what I was
looking for instead. GA is, in essence, much more powerful if used in
specialized setting with knowledge of the problem. I will go over this
proposition later.&lt;/p&gt;

&lt;p&gt;Genetic Algorithm faces a lot of criticism. Criticism from researchers are
&lt;em&gt;usually&lt;/em&gt; constructive. For example there has been a lot of ‘debate &lt;em&gt;and&lt;/em&gt; work’
on the role of crossover in GAs. But I have also seen the users and learners
frowning at few of its aspects without going through what it is that GA really
does.&lt;/p&gt;

&lt;h2 id=&quot;fundamental-ideas&quot;&gt;Fundamental ideas&lt;/h2&gt;

&lt;p&gt;The main source of inspiration for GA is sexual reproduction. The core ideas
including mate selection, gene crossover and mutation are all faithfully (to a
certain level of abstraction) incorporated in it. But there are vital differences
between the role of sexual reproduction and our needs from GA, a topic covering
the meaning of &lt;em&gt;fitness functions&lt;/em&gt; and its population aggregate. Let us leave
the way fitness is used in traditional GA and focus on the two &lt;em&gt;major&lt;/em&gt;
operations.&lt;/p&gt;

&lt;h3 id=&quot;mutation&quot;&gt;Mutation&lt;/h3&gt;

&lt;p&gt;This is simply what every other random search algorithm does. Slight change from
the current solution. Using a bit string solution representation like
\(0100100\), a simple point mutation along with fitness based selection
procedure essentially is the hill climb algorithm. Change bits, evaluate the new
positions and shift the population towards the better fitness. This case is
stronger with situations including \(N\to\infty\) (larger population size,
\(N\)), higher rate of mutation, elite individuals etc.&lt;/p&gt;

&lt;p&gt;Mutation coupled with a population and selection procedure results in a nice
global optimizer. Even more important is the ease of understanding the word
&lt;em&gt;“mutation”&lt;/em&gt; with respect to the problem representation. Use bit strings or
direct real values or other symbols, mutation means what it means.&lt;/p&gt;

&lt;h3 id=&quot;crossover&quot;&gt;Crossover&lt;/h3&gt;

&lt;p&gt;In a common representation, a crossover operation swaps sections of solution
strings from two mating parents. Now, this needs a little bit of digging. What
purpose copying a snippet of gene from parents to children could have? &lt;em&gt;To inherit
 and move around some specific &lt;strong&gt;chunks&lt;/strong&gt; of functional properties&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A topic of debate among researchers is whether crossover actually has some
theoretical advantage and meaning for the problems. Some arguments reduce
crossover as a fancy form of mutation, while some arguments support its usage
separately.&lt;/p&gt;

&lt;p&gt;Without going into the arguments, its better to stick to the
fundamentals of crossover and, as a user, exploit its basics. &lt;em&gt;It maintains
chunks of properties among the population and across generations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In GA, you can represent the solution as &lt;em&gt;chromosomes&lt;/em&gt; in multiple ways. A
common method to represent real number parameters is to use direct value
encoding. Let the fitness function simply be \(f(a)\). For crossing over
individuals in this form, there are blending and interpolation techniques for
numbers. While mating two solutions, \(a_{1}\) and \(a_{2}\), a simple
\(\alpha\) blending gives&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a_{3} = \alpha a_{1} + (1-\alpha) a_{2}&lt;/script&gt;

&lt;p&gt;Now, here is what the wikipedia
&lt;a href=&quot;https://en.wikipedia.org/wiki/Differential_evolution&quot;&gt;page&lt;/a&gt; on Differential
Evolution (DE) says&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DE optimizes a problem by maintaining a population of candidate solutions and
creating new candidate solutions by combining existing ones according to its
simple formulae, and then keeping whichever candidate solution has the best
score or fitness on the optimization problem at hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is there an identity crisis here?&lt;/p&gt;

&lt;h2 id=&quot;fundamental-ideas-again&quot;&gt;Fundamental ideas, again&lt;/h2&gt;

&lt;p&gt;Look, everything works. Some variations are better and there are theoretical and
empirical results backing them up. But then sometimes I feel it is unfair to
throw any problem at GA assuming it as a general purpose optimizer. Back to the
proposition made in the beginning of the post and the main question of the post.
I really like to think the answer to be something on the following lines&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GA provides a framework for manipulation of a structure made from &lt;strong&gt;symbols&lt;/strong&gt;
to achieve a desired behaviour in decently low time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many variations of GA stick to this idea.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Genetic_programming&quot;&gt;Genetic Programming&lt;/a&gt; is a
nice example. Consider following lisp sexpr:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;test-function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Evaluate negative of slope of function at x&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The function is approximating the (-ve of) slope of another function by calculating&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;- \frac{fn(x + \Delta x) - fn(x - \Delta x)}{2 \times \Delta x}&lt;/script&gt;

&lt;p&gt;The tree structure of operations has usable chunks which are essential to get
the final output. Consider the numerator chunk.&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This generates an important template for good solutions if you want a quantity
like slope. In GA terminology, this template consisting of some form of fixed
structure and spaces for variations is called &lt;em&gt;schema&lt;/em&gt;. This schema has a
fitness associated with it which is the average of fitness of all solutions
matching this template. For the above template, the fitness is good since most
of the variations around the template will result in some simple operation on
the difference of function values. This is better than a case, say, where the
template is a sum of function values at two neighbouring points.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Holland%27s_schema_theorem&quot;&gt;fundamental theorem of GA&lt;/a&gt;
says that the &lt;em&gt;power&lt;/em&gt; of GA comes from increasing the population fraction of
schemata with smaller fixed parts and better fitness over generations. The
better schemata survive the operations and live on.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now here is a case. I was using the traditional value encoded form of GA for a
global optimization at some point in my undergraduate life. I kept the approach
somewhat similar to Matlab’s. Value encoding, elite individuals, gaussian mutation,
simulated binary crossover and tournament selection. It did whatever it was
meant to. But then I started to fiddle around a bit with parameters and switches
(whether to use this operation, that selection criteria etc.) and realized that
I am doing what can be called
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cargo_cult_science&quot;&gt;cargo cult&lt;/a&gt; tuning&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following fitness surface and value encoding. Considering crossover
as extrapolations along some dimension, you can see two kind of results of
mating. One better, one worse. That’s fine, it happens in real crossovers too.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/images/posts/ga/surf.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;But the point is, user can’t seem to understand and extract the &lt;em&gt;power&lt;/em&gt; of
GA here. What are the schemata getting passed on? Where the crossover points
are? More importantly, what can I do to improve performance?&lt;/p&gt;

&lt;p&gt;In my opinion, its better to use a method whose &lt;em&gt;knobs&lt;/em&gt; (parameters etc.)
correspond to the problem in hand and which &lt;em&gt;really&lt;/em&gt; pass on the essence of the
&lt;em&gt;operations&lt;/em&gt; as some connectable effects on the problem. And then judge the
algorithm, in case a judgment is to be made.&lt;/p&gt;

&lt;p&gt;Last year, Randy Olson
&lt;a href=&quot;http://www.randalolson.com/2015/02/03/heres-waldo-computing-the-optimal-search-strategy-for-finding-waldo/&quot;&gt;blogged&lt;/a&gt;
about solving a Travelling Salesman Problem (TSP) with Genetic Algorithm. TSP
solutions have chunks of continuous paths which can be locally optimal.
Debugging makes sense here because the operations are intuitive. Also consider
&lt;a href=&quot;https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies&quot;&gt;NEAT&lt;/a&gt;,
which &lt;em&gt;evolves&lt;/em&gt; neural network structures. Same idea. Manipulation of symbols
and &lt;em&gt;actual&lt;/em&gt; implications of crossovers (of chunk of structural trees lets say)
etc. Similar is the case with many examples which use Genetic Programming. There
are cases where a genetic approach actually provides easier implementation and
better results than other methods.&lt;/p&gt;

&lt;p&gt;I found this piece of criticism by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Steven_Skiena&quot;&gt;Steven Skiena&lt;/a&gt; on Wikipedia page
of GA&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[I]t is quite unnatural to model applications in terms of genetic operators
like mutation and crossover on bit strings. The pseudobiology adds another
level of complexity between you and your problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem Skiena is addressing is important. The operators are not intuitive
at all for general problems and add on the burden of the user. Well, you do get
good performance than other methods in different cases. But my opinion is to
&lt;em&gt;respect&lt;/em&gt; [the full fledged] GA for its help &lt;em&gt;in context&lt;/em&gt; of a certain class of
problem, not as a go-to general purpose optimizer (for which you would be better
started by programming a simple and quick disruptive method).&lt;/p&gt;

&lt;p&gt;Your problem can have some allowed set of schemata. For example, if you have a
bit string representation of 3-4 parameters, you might like a form of schemata
which break the string at the junctions of the numbers for crossovers. Or in
some cases you might want to group few bits of strings and evolve them
separately. You can try inspirations from &lt;em&gt;speciation&lt;/em&gt;. You can create &lt;em&gt;artificial
islands&lt;/em&gt;. You can try some weird animal group behaviour. They all are good &lt;em&gt;if&lt;/em&gt;
your problem needs them and the effects are reflected in the evolution of
solutions. Otherwise, they are another set of instances of misjudgment of the
method.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 -0400</pubDate>
        <link>https://lepisma.github.io//2016/06/13/genetic-algorithm/</link>
        <guid isPermaLink="true">https://lepisma.github.io//2016/06/13/genetic-algorithm/</guid>
      </item>
    
  </channel>
</rss>
